/**\n * Test data fixtures for LokDarpan E2E tests\n * Provides consistent test data and mock responses\n */\n\nexport const EMOTIONS = [\n  'All', 'Anger', 'Joy', 'Hopeful', 'Frustration', \n  'Fear', 'Sadness', 'Disgust', 'Positive', 'Negative', \n  'Admiration', 'Pride'\n];\n\nexport const SAMPLE_WARDS = [\n  'All',\n  'Jubilee Hills',\n  'Banjara Hills', \n  'Gachibowli',\n  'Hitech City',\n  'Kondapur',\n  'Madhapur',\n  'Miyapur'\n];\n\nexport const TEST_KEYWORDS = [\n  'roads',\n  'water supply',\n  'electricity',\n  'healthcare',\n  'education',\n  'infrastructure',\n  'development',\n  'festival'\n];\n\nexport const VIEWPORT_SIZES = {\n  desktop: { width: 1920, height: 1080 },\n  laptop: { width: 1366, height: 768 },\n  tablet: { width: 768, height: 1024 },\n  mobile: { width: 375, height: 667 },\n  smallMobile: { width: 320, height: 568 }\n};\n\nexport const PERFORMANCE_THRESHOLDS = {\n  loadTime: 5000,      // 5 seconds max load time\n  fcp: 3000,           // First Contentful Paint\n  lcp: 4000,           // Largest Contentful Paint  \n  cls: 0.1,            // Cumulative Layout Shift\n  fid: 100,            // First Input Delay\n  ttfb: 1000           // Time To First Byte\n};\n\nexport const API_ENDPOINTS = {\n  login: '/api/v1/login',\n  status: '/api/v1/status',\n  posts: '/api/v1/posts',\n  geojson: '/api/v1/geojson',\n  competitiveAnalysis: '/api/v1/competitive-analysis',\n  trends: '/api/v1/trends',\n  pulse: '/api/v1/pulse',\n  wardMeta: '/api/v1/ward/meta',\n  prediction: '/api/v1/prediction',\n  alerts: '/api/v1/alerts'\n};\n\nexport const MOCK_RESPONSES = {\n  posts: {\n    success: {\n      items: [\n        {\n          id: 1,\n          text: 'Roads in Jubilee Hills need improvement',\n          emotion: 'frustration',\n          created_at: '2025-01-20T10:00:00Z',\n          ward: 'Jubilee Hills'\n        },\n        {\n          id: 2,\n          text: 'Great festival celebration in the ward',\n          emotion: 'joy', \n          created_at: '2025-01-20T11:00:00Z',\n          ward: 'Jubilee Hills'\n        }\n      ]\n    },\n    empty: { items: [] },\n    error: { error: 'Failed to fetch posts' }\n  },\n  \n  competitiveAnalysis: {\n    success: {\n      'BJP': { total_mentions: 45, sentiment_score: 0.3 },\n      'AIMIM': { total_mentions: 38, sentiment_score: 0.1 },\n      'BRS': { total_mentions: 52, sentiment_score: 0.2 },\n      'INC': { total_mentions: 41, sentiment_score: 0.4 }\n    },\n    empty: {},\n    error: { error: 'Analysis unavailable' }\n  },\n  \n  trends: {\n    success: {\n      emotions: [\n        { date: '2025-01-15', anger: 10, joy: 25, hopeful: 15 },\n        { date: '2025-01-16', anger: 12, joy: 28, hopeful: 18 },\n        { date: '2025-01-17', anger: 8, joy: 30, hopeful: 22 }\n      ],\n      parties: [\n        { date: '2025-01-15', BJP: 45, AIMIM: 38, BRS: 52, INC: 41 },\n        { date: '2025-01-16', BJP: 48, AIMIM: 35, BRS: 49, INC: 44 },\n        { date: '2025-01-17', BJP: 42, AIMIM: 40, BRS: 55, INC: 38 }\n      ]\n    },\n    error: { error: 'Trends data unavailable' }\n  }\n};\n\nexport const ERROR_SCENARIOS = {\n  networkFailure: {\n    description: 'Network request failure',\n    response: { status: 0, error: 'Network Error' }\n  },\n  serverError: {\n    description: 'Internal server error', \n    response: { status: 500, error: 'Internal Server Error' }\n  },\n  unauthorized: {\n    description: 'Authentication failure',\n    response: { status: 401, error: 'Unauthorized' }\n  },\n  notFound: {\n    description: 'Resource not found',\n    response: { status: 404, error: 'Not Found' }\n  },\n  timeout: {\n    description: 'Request timeout',\n    response: { status: 408, error: 'Request Timeout' }\n  }\n};\n\nexport const ACCESSIBILITY_TESTS = {\n  keyboardNavigation: [\n    'Tab', 'Enter', 'Space', 'Escape', 'ArrowDown', 'ArrowUp'\n  ],\n  ariaLabels: [\n    'button', 'textbox', 'combobox', 'option', 'menu', 'menuitem'\n  ],\n  colorContrast: {\n    minimumRatio: 4.5,\n    largeTextRatio: 3.0\n  }\n};\n\nexport const COMPONENT_SELECTORS = {\n  dashboard: {\n    container: '[data-testid=\"dashboard\"], .space-y-6',\n    healthIndicator: '[data-testid=\"dashboard-health\"]',\n    filters: {\n      emotion: 'select:has(option:text(\"Anger\"))',\n      ward: 'select:has(option:text(\"All\"))', \n      keyword: 'input[placeholder*=\"keyword\" i]'\n    }\n  },\n  components: {\n    strategicSummary: '.bg-white:has-text(\"Strategic Summary\")',\n    map: '.bg-white:has-text(\"Geospatial Intelligence\")',\n    sentimentChart: '.bg-white:has-text(\"Sentiment Overview\")',\n    competitiveAnalysis: '.bg-white:has-text(\"Competitive Analysis\")',\n    timeSeriesChart: '.bg-white:has-text(\"Trend: Emotions\")',\n    topicAnalysis: '.bg-white:has-text(\"Topic Analysis\")',\n    competitorTrend: '.bg-white:has-text(\"Competitor Trend\")',\n    competitiveBenchmark: '.bg-white:has-text(\"Competitive Benchmark\")',\n    predictionSummary: '.bg-white:has-text(\"Predictive Outlook\")'\n  },\n  charts: 'canvas, svg, [data-testid*=\"chart\"]',\n  loading: 'text=Loading, [data-testid*=\"loading\"], .animate-spin',\n  errors: '[data-testid*=\"error\"], .error-fallback, text=temporarily unavailable'\n};\n\nexport const TEST_TIMEOUTS = {\n  short: 5000,\n  medium: 15000, \n  long: 30000,\n  xlarge: 60000\n};\n\n/**\n * Utility function to get random test data\n */\nexport function getRandomTestData() {\n  return {\n    emotion: EMOTIONS[Math.floor(Math.random() * EMOTIONS.length)],\n    ward: SAMPLE_WARDS[Math.floor(Math.random() * SAMPLE_WARDS.length)],\n    keyword: TEST_KEYWORDS[Math.floor(Math.random() * TEST_KEYWORDS.length)]\n  };\n}\n\n/**\n * Utility function to create test scenarios\n */\nexport function createTestScenarios(baseScenario, variations) {\n  return variations.map(variation => ({\n    ...baseScenario,\n    ...variation,\n    name: `${baseScenario.name} - ${variation.name}`\n  }));\n}\n\n/**\n * Mock API response helper\n */\nexport function createMockResponse(endpoint, scenario = 'success', delay = 0) {\n  const response = MOCK_RESPONSES[endpoint]?.[scenario] || {};\n  \n  return {\n    status: scenario === 'error' ? 500 : 200,\n    body: JSON.stringify(response),\n    headers: { 'Content-Type': 'application/json' },\n    delay\n  };\n}