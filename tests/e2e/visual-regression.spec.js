import { test, expect } from '@playwright/test';\nimport { DashboardPage } from './pages/DashboardPage.js';\nimport { \n  VIEWPORT_SIZES, SAMPLE_WARDS, EMOTIONS \n} from './fixtures/testData.js';\nimport { \n  waitForPageStability, capturePageScreenshot\n} from './utils/testHelpers.js';\n\ntest.describe('LokDarpan Visual Regression Testing', () => {\n  let dashboardPage;\n\n  test.beforeEach(async ({ page }) => {\n    dashboardPage = new DashboardPage(page);\n    await dashboardPage.goto();\n    await waitForPageStability(page);\n  });\n\n  test.describe('Dashboard Layout Screenshots', () => {\n    test('should capture full dashboard layout', async ({ page }) => {\n      await test.step('Desktop full dashboard', async () => {\n        await page.setViewportSize(VIEWPORT_SIZES.desktop);\n        await waitForPageStability(page);\n        \n        // Take full page screenshot\n        await expect(page).toHaveScreenshot('dashboard-full-desktop.png', {\n          fullPage: true,\n          animations: 'disabled',\n          mask: [\n            // Mask dynamic elements that change frequently\n            page.locator('text=/\\d{4}-\\d{2}-\\d{2}/'), // Dates\n            page.locator('text=/\\d+:\\d+/'), // Times\n            page.locator('.animate-spin'), // Loading spinners\n          ]\n        });\n      });\n\n      await test.step('Tablet dashboard layout', async () => {\n        await page.setViewportSize(VIEWPORT_SIZES.tablet);\n        await page.waitForTimeout(1000);\n        \n        await expect(page).toHaveScreenshot('dashboard-full-tablet.png', {\n          fullPage: true,\n          animations: 'disabled',\n          mask: [\n            page.locator('text=/\\d{4}-\\d{2}-\\d{2}/'),\n            page.locator('.animate-spin')\n          ]\n        });\n      });\n\n      await test.step('Mobile dashboard layout', async () => {\n        await page.setViewportSize(VIEWPORT_SIZES.mobile);\n        await page.waitForTimeout(1000);\n        \n        await expect(page).toHaveScreenshot('dashboard-full-mobile.png', {\n          fullPage: true,\n          animations: 'disabled',\n          mask: [\n            page.locator('text=/\\d{4}-\\d{2}-\\d{2}/'),\n            page.locator('.animate-spin')\n          ]\n        });\n      });\n    });\n  });\n\n  test.describe('Component Visual Testing', () => {\n    test('should capture strategic summary component', async ({ page }) => {\n      await page.setViewportSize(VIEWPORT_SIZES.desktop);\n      \n      // Test different ward states\n      const testWards = ['All', 'Jubilee Hills', 'Gachibowli'];\n      \n      for (const ward of testWards) {\n        await test.step(`Strategic summary for ${ward}`, async () => {\n          await dashboardPage.selectWard(ward);\n          await waitForPageStability(page);\n          \n          const strategicSummary = dashboardPage.strategicSummary;\n          await expect(strategicSummary).toBeVisible();\n          \n          await expect(strategicSummary).toHaveScreenshot(`strategic-summary-${ward.toLowerCase().replace(' ', '-')}.png`, {\n            animations: 'disabled',\n            mask: [\n              strategicSummary.locator('text=/\\d{4}-\\d{2}-\\d{2}/'),\n              strategicSummary.locator('.animate-spin')\n            ]\n          });\n        });\n      }\n    });\n\n    test('should capture map component states', async ({ page }) => {\n      await page.setViewportSize(VIEWPORT_SIZES.desktop);\n      \n      await test.step('Map component with different states', async () => {\n        const mapContainer = dashboardPage.mapContainer;\n        await expect(mapContainer).toBeVisible();\n        \n        // Capture default state\n        await expect(mapContainer).toHaveScreenshot('map-component-default.png', {\n          animations: 'disabled'\n        });\n        \n        // Capture after ward selection\n        await dashboardPage.selectWard('Banjara Hills');\n        await waitForPageStability(page);\n        \n        await expect(mapContainer).toHaveScreenshot('map-component-ward-selected.png', {\n          animations: 'disabled'\n        });\n      });\n    });\n\n    test('should capture chart components', async ({ page }) => {\n      await page.setViewportSize(VIEWPORT_SIZES.desktop);\n      \n      const chartComponents = [\n        { name: 'sentiment-chart', locator: dashboardPage.sentimentChart },\n        { name: 'competitive-analysis', locator: dashboardPage.competitiveAnalysis },\n        { name: 'time-series-chart', locator: dashboardPage.timeSeriesChart },\n        { name: 'topic-analysis', locator: dashboardPage.topicAnalysis }\n      ];\n      \n      for (const chart of chartComponents) {\n        await test.step(`Capture ${chart.name}`, async () => {\n          await expect(chart.locator).toBeVisible();\n          \n          // Wait for chart rendering\n          await page.waitForTimeout(2000);\n          \n          await expect(chart.locator).toHaveScreenshot(`${chart.name}-component.png`, {\n            animations: 'disabled',\n            mask: [\n              chart.locator.locator('text=/\\d{4}-\\d{2}-\\d{2}/'),\n              chart.locator.locator('.animate-spin')\n            ]\n          });\n        });\n      }\n    });\n\n    test('should capture filter components', async ({ page }) => {\n      await page.setViewportSize(VIEWPORT_SIZES.desktop);\n      \n      await test.step('Filter controls visual state', async () => {\n        const filtersContainer = page.locator('.grid:has(select, input[placeholder*=\"keyword\"])');\n        await expect(filtersContainer).toBeVisible();\n        \n        await expect(filtersContainer).toHaveScreenshot('filter-controls-default.png', {\n          animations: 'disabled'\n        });\n        \n        // Capture with active filters\n        await dashboardPage.selectEmotion('Joy');\n        await dashboardPage.searchKeyword('infrastructure');\n        \n        await expect(filtersContainer).toHaveScreenshot('filter-controls-active.png', {\n          animations: 'disabled'\n        });\n      });\n    });\n  });\n\n  test.describe('State-based Visual Testing', () => {\n    test('should capture different emotion filter states', async ({ page }) => {\n      await page.setViewportSize(VIEWPORT_SIZES.desktop);\n      \n      const testEmotions = ['All', 'Joy', 'Anger', 'Hopeful'];\n      \n      for (const emotion of testEmotions) {\n        await test.step(`Dashboard with ${emotion} emotion filter`, async () => {\n          await dashboardPage.selectEmotion(emotion);\n          await waitForPageStability(page);\n          \n          // Capture sentiment chart specifically as it should change\n          await expect(dashboardPage.sentimentChart).toHaveScreenshot(`sentiment-${emotion.toLowerCase()}.png`, {\n            animations: 'disabled',\n            mask: [\n              dashboardPage.sentimentChart.locator('.animate-spin')\n            ]\n          });\n        });\n      }\n    });\n\n    test('should capture ward-specific visualizations', async ({ page }) => {\n      await page.setViewportSize(VIEWPORT_SIZES.desktop);\n      \n      const testWards = ['Jubilee Hills', 'Gachibowli', 'Hitech City'];\n      \n      for (const ward of testWards) {\n        await test.step(`Ward-specific data for ${ward}`, async () => {\n          await dashboardPage.selectWard(ward);\n          await waitForPageStability(page);\n          \n          // Capture competitive analysis as it should vary by ward\n          await expect(dashboardPage.competitiveAnalysis).toHaveScreenshot(`competitive-${ward.toLowerCase().replace(' ', '-')}.png`, {\n            animations: 'disabled',\n            mask: [\n              dashboardPage.competitiveAnalysis.locator('.animate-spin')\n            ]\n          });\n        });\n      }\n    });\n  });\n\n  test.describe('Error State Visual Testing', () => {\n    test('should capture error boundary states', async ({ page }) => {\n      await test.step('Component with error boundaries', async () => {\n        // Check if any error boundaries are active\n        const errorBoundaries = await page.locator('text=temporarily unavailable, .error-fallback').count();\n        \n        if (errorBoundaries > 0) {\n          // Capture error boundary states\n          const errorElements = page.locator('text=temporarily unavailable, .error-fallback');\n          \n          for (let i = 0; i < Math.min(errorBoundaries, 3); i++) {\n            const errorElement = errorElements.nth(i);\n            await expect(errorElement).toHaveScreenshot(`error-boundary-${i + 1}.png`);\n          }\n        }\n      });\n    });\n\n    test('should capture loading states', async ({ page }) => {\n      await test.step('Components in loading state', async () => {\n        // Trigger loading by changing ward\n        await dashboardPage.selectWard('Kondapur');\n        \n        // Quickly capture loading states before they complete\n        const loadingElements = page.locator('.animate-spin, text=Loading');\n        const loadingCount = await loadingElements.count();\n        \n        if (loadingCount > 0) {\n          await expect(loadingElements.first()).toHaveScreenshot('loading-state.png');\n        }\n      });\n    });\n  });\n\n  test.describe('Responsive Visual Testing', () => {\n    test('should capture responsive breakpoint transitions', async ({ page }) => {\n      const breakpoints = [\n        { name: 'desktop-large', size: { width: 1920, height: 1080 } },\n        { name: 'desktop-medium', size: { width: 1366, height: 768 } },\n        { name: 'tablet-landscape', size: { width: 1024, height: 768 } },\n        { name: 'tablet-portrait', size: { width: 768, height: 1024 } },\n        { name: 'mobile-large', size: { width: 414, height: 736 } },\n        { name: 'mobile-medium', size: { width: 375, height: 667 } }\n      ];\n      \n      for (const breakpoint of breakpoints) {\n        await test.step(`Responsive layout at ${breakpoint.name}`, async () => {\n          await page.setViewportSize(breakpoint.size);\n          await page.waitForTimeout(1000);\n          \n          // Capture main dashboard area\n          await expect(dashboardPage.dashboardContainer).toHaveScreenshot(`responsive-${breakpoint.name}.png`, {\n            animations: 'disabled',\n            mask: [\n              page.locator('text=/\\d{4}-\\d{2}-\\d{2}/'),\n              page.locator('.animate-spin')\n            ]\n          });\n        });\n      }\n    });\n\n    test('should capture mobile-specific layouts', async ({ page }) => {\n      await page.setViewportSize(VIEWPORT_SIZES.mobile);\n      await page.waitForTimeout(1000);\n      \n      await test.step('Mobile chart adaptations', async () => {\n        // Charts should adapt to mobile screens\n        const mobileCharts = [\n          { name: 'mobile-sentiment', locator: dashboardPage.sentimentChart },\n          { name: 'mobile-competitive', locator: dashboardPage.competitiveAnalysis }\n        ];\n        \n        for (const chart of mobileCharts) {\n          await expect(chart.locator).toBeVisible();\n          \n          await expect(chart.locator).toHaveScreenshot(`${chart.name}.png`, {\n            animations: 'disabled',\n            mask: [\n              chart.locator.locator('.animate-spin')\n            ]\n          });\n        }\n      });\n    });\n  });\n\n  test.describe('Interactive State Captures', () => {\n    test('should capture hover and focus states', async ({ page }) => {\n      await page.setViewportSize(VIEWPORT_SIZES.desktop);\n      \n      await test.step('Filter control focus states', async () => {\n        // Focus on emotion filter\n        await dashboardPage.emotionFilter.focus();\n        \n        const filtersContainer = page.locator('.grid:has(select, input)');\n        await expect(filtersContainer).toHaveScreenshot('filters-emotion-focused.png');\n        \n        // Focus on ward dropdown\n        await dashboardPage.wardDropdown.focus();\n        await expect(filtersContainer).toHaveScreenshot('filters-ward-focused.png');\n        \n        // Focus on keyword search\n        await dashboardPage.keywordSearch.focus();\n        await expect(filtersContainer).toHaveScreenshot('filters-search-focused.png');\n      });\n    });\n\n    test('should capture dropdown expanded states', async ({ page }) => {\n      await page.setViewportSize(VIEWPORT_SIZES.desktop);\n      \n      await test.step('Expanded dropdown states', async () => {\n        // Open emotion filter dropdown\n        await dashboardPage.emotionFilter.click();\n        \n        // Wait for dropdown to expand\n        await page.waitForTimeout(300);\n        \n        await expect(page).toHaveScreenshot('emotion-dropdown-expanded.png', {\n          mask: [\n            page.locator('text=/\\d{4}-\\d{2}-\\d{2}/'),\n            page.locator('.animate-spin')\n          ]\n        });\n        \n        // Close dropdown\n        await dashboardPage.emotionFilter.press('Escape');\n        \n        // Open ward dropdown\n        await dashboardPage.wardDropdown.click();\n        await page.waitForTimeout(300);\n        \n        await expect(page).toHaveScreenshot('ward-dropdown-expanded.png', {\n          mask: [\n            page.locator('text=/\\d{4}-\\d{2}-\\d{2}/'),\n            page.locator('.animate-spin')\n          ]\n        });\n      });\n    });\n  });\n\n  test.describe('Visual Regression Validation', () => {\n    test('should detect layout shifts', async ({ page }) => {\n      await page.setViewportSize(VIEWPORT_SIZES.desktop);\n      \n      await test.step('Baseline layout capture', async () => {\n        // Wait for complete page load\n        await waitForPageStability(page, { timeout: 10000 });\n        \n        // Capture baseline\n        await expect(dashboardPage.dashboardContainer).toHaveScreenshot('layout-baseline.png', {\n          animations: 'disabled',\n          mask: [\n            page.locator('text=/\\d{4}-\\d{2}-\\d{2}/'),\n            page.locator('.animate-spin'),\n            dashboardPage.strategicSummary // Strategic summary may have dynamic content\n          ]\n        });\n      });\n      \n      await test.step('Layout after filter changes', async () => {\n        // Apply filters\n        await dashboardPage.selectEmotion('Joy');\n        await dashboardPage.selectWard('Jubilee Hills');\n        await waitForPageStability(page);\n        \n        // Layout structure should remain consistent\n        await expect(dashboardPage.dashboardContainer).toHaveScreenshot('layout-after-filters.png', {\n          animations: 'disabled',\n          mask: [\n            page.locator('text=/\\d{4}-\\d{2}-\\d{2}/'),\n            page.locator('.animate-spin'),\n            dashboardPage.strategicSummary,\n            dashboardPage.sentimentChart, // Charts may change with filters\n            dashboardPage.competitiveAnalysis\n          ]\n        });\n      });\n    });\n\n    test('should validate consistent component positioning', async ({ page }) => {\n      await page.setViewportSize(VIEWPORT_SIZES.desktop);\n      \n      const testScenarios = [\n        { name: 'default', filters: {} },\n        { name: 'filtered', filters: { emotion: 'Anger', ward: 'Gachibowli' } },\n        { name: 'searched', filters: { keyword: 'development' } }\n      ];\n      \n      for (const scenario of testScenarios) {\n        await test.step(`Component positioning - ${scenario.name}`, async () => {\n          // Reset state\n          await dashboardPage.selectEmotion('All');\n          await dashboardPage.selectWard('All');\n          await dashboardPage.clearKeywordSearch();\n          \n          // Apply scenario filters\n          if (scenario.filters.emotion) {\n            await dashboardPage.selectEmotion(scenario.filters.emotion);\n          }\n          if (scenario.filters.ward) {\n            await dashboardPage.selectWard(scenario.filters.ward);\n          }\n          if (scenario.filters.keyword) {\n            await dashboardPage.searchKeyword(scenario.filters.keyword);\n          }\n          \n          await waitForPageStability(page);\n          \n          // Capture component grid structure\n          const gridContainer = page.locator('.grid, .space-y-6').first();\n          await expect(gridContainer).toHaveScreenshot(`component-grid-${scenario.name}.png`, {\n            animations: 'disabled',\n            mask: [\n              // Mask content that changes but preserve layout structure\n              page.locator('canvas'),\n              page.locator('svg'),\n              page.locator('text=/\\d{4}-\\d{2}-\\d{2}/'),\n              page.locator('.animate-spin')\n            ]\n          });\n        });\n      }\n    });\n  });\n});