/**
 * Page Object Model for LokDarpan Dashboard
 * Provides reusable methods for dashboard interactions and validations
 */
export class DashboardPage {
  constructor(page) {
    this.page = page;
    
    // Main navigation and layout
    this.dashboardContainer = page.locator('[data-testid="dashboard"], .space-y-6').first();
    this.healthIndicator = page.locator('[data-testid="dashboard-health"], text=Dashboard').first();
    
    // Filter controls
    this.emotionFilter = page.locator('select').filter({ hasText: 'Emotion' }).or(page.locator('select:has(option:text("Anger"))')).first();
    this.wardDropdown = page.locator('select').filter({ hasText: 'Ward' }).or(page.locator('select:has(option:text("All"))')).first();
    this.keywordSearch = page.locator('input[placeholder*="keyword" i], input[placeholder*="search" i]').first();
    
    // Core components
    this.strategicSummary = page.locator('.bg-white:has-text("Strategic Summary")').first();
    this.mapContainer = page.locator('.bg-white:has-text("Geospatial Intelligence")').first();
    this.sentimentChart = page.locator('.bg-white:has-text("Sentiment Overview")').first();
    this.competitiveAnalysis = page.locator('.bg-white:has-text("Competitive Analysis")').first();
    
    // Advanced analytics
    this.timeSeriesChart = page.locator('.bg-white:has-text("Trend: Emotions")').first();
    this.topicAnalysis = page.locator('.bg-white:has-text("Topic Analysis")').first();
    this.competitorTrend = page.locator('.bg-white:has-text("Competitor Trend")').first();
    this.competitiveBenchmark = page.locator('.bg-white:has-text("Competitive Benchmark")').first();
    this.predictionSummary = page.locator('.bg-white:has-text("Predictive Outlook")').first();
    
    // Data elements
    this.charts = page.locator('canvas, svg, [data-testid*="chart"]');
    this.loadingIndicators = page.locator('text=Loading, [data-testid*="loading"], .animate-spin');
    this.errorBoundaries = page.locator('[data-testid*="error"], .error-fallback, text=temporarily unavailable');
    
    // Ward-specific elements
    this.wardMetaPanel = page.locator('.bg-white:has-text("Ward"), [data-testid="ward-meta"]').first();
    this.alertsPanel = page.locator('.bg-white:has-text("Intelligence"), [data-testid="alerts"]').first();
  }\n\n  // Navigation methods\n  async goto() {\n    await this.page.goto('/');\n    await this.waitForDashboardLoad();\n  }\n\n  async waitForDashboardLoad() {\n    // Wait for main dashboard elements to be visible\n    await this.dashboardContainer.waitFor({ timeout: 30000 });\n    await this.page.waitForLoadState('networkidle');\n    \n    // Wait for initial data load\n    await this.page.waitForTimeout(2000);\n  }\n\n  // Filter interaction methods\n  async selectEmotion(emotion) {\n    await this.emotionFilter.selectOption(emotion);\n    await this.waitForDataUpdate();\n  }\n\n  async selectWard(wardName) {\n    await this.wardDropdown.selectOption(wardName);\n    await this.waitForDataUpdate();\n  }\n\n  async searchKeyword(keyword) {\n    await this.keywordSearch.fill(keyword);\n    await this.keywordSearch.press('Enter');\n    await this.waitForDataUpdate();\n  }\n\n  async clearKeywordSearch() {\n    await this.keywordSearch.clear();\n    await this.waitForDataUpdate();\n  }\n\n  // Component validation methods\n  async validateCoreComponents() {\n    const components = [\n      { name: 'Strategic Summary', locator: this.strategicSummary },\n      { name: 'Map Container', locator: this.mapContainer },\n      { name: 'Sentiment Chart', locator: this.sentimentChart },\n      { name: 'Competitive Analysis', locator: this.competitiveAnalysis }\n    ];\n\n    for (const component of components) {\n      await component.locator.waitFor({ timeout: 15000 });\n      if (!await component.locator.isVisible()) {\n        throw new Error(`Core component '${component.name}' is not visible`);\n      }\n    }\n  }\n\n  async validateAdvancedAnalytics() {\n    const analytics = [\n      { name: 'Time Series Chart', locator: this.timeSeriesChart },\n      { name: 'Topic Analysis', locator: this.topicAnalysis },\n      { name: 'Competitor Trend', locator: this.competitorTrend },\n      { name: 'Competitive Benchmark', locator: this.competitiveBenchmark },\n      { name: 'Prediction Summary', locator: this.predictionSummary }\n    ];\n\n    for (const analytic of analytics) {\n      await analytic.locator.waitFor({ timeout: 15000 });\n      if (!await analytic.locator.isVisible()) {\n        throw new Error(`Advanced analytic '${analytic.name}' is not visible`);\n      }\n    }\n  }\n\n  // Chart validation methods\n  async validateChartsRender() {\n    const chartCount = await this.charts.count();\n    if (chartCount === 0) {\n      throw new Error('No data visualization charts found on dashboard');\n    }\n    \n    // Wait for charts to render\n    await this.page.waitForTimeout(3000);\n    return chartCount;\n  }\n\n  // Error boundary testing methods\n  async checkForErrorBoundaries() {\n    const errorCount = await this.errorBoundaries.count();\n    return errorCount;\n  }\n\n  async validateNoComponentCrashes() {\n    // Check that main dashboard container is still present\n    await this.dashboardContainer.waitFor({ timeout: 5000 });\n    \n    // Verify no catastrophic JavaScript errors\n    const consoleErrors = [];\n    this.page.on('console', msg => {\n      if (msg.type() === 'error' && !msg.text().includes('Failed to load resource')) {\n        consoleErrors.push(msg.text());\n      }\n    });\n    \n    return consoleErrors;\n  }\n\n  // Ward selection methods\n  async getAvailableWards() {\n    await this.wardDropdown.click();\n    const options = await this.wardDropdown.locator('option').allTextContents();\n    await this.wardDropdown.press('Escape'); // Close dropdown\n    return options.filter(option => option.trim() !== '');\n  }\n\n  async selectRandomWard() {\n    const wards = await this.getAvailableWards();\n    const nonAllWards = wards.filter(ward => ward !== 'All');\n    \n    if (nonAllWards.length > 0) {\n      const randomWard = nonAllWards[Math.floor(Math.random() * nonAllWards.length)];\n      await this.selectWard(randomWard);\n      return randomWard;\n    }\n    return null;\n  }\n\n  // Map interaction methods\n  async clickOnMap(coordinates) {\n    const mapElement = this.mapContainer.locator('canvas, svg, .leaflet-container').first();\n    await mapElement.click({ position: coordinates });\n    await this.waitForDataUpdate();\n  }\n\n  async validateMapFunctionality() {\n    const mapElement = this.mapContainer.locator('canvas, svg, .leaflet-container, text=Interactive').first();\n    return await mapElement.isVisible();\n  }\n\n  // Responsive design validation\n  async validateResponsiveLayout(viewportSize) {\n    await this.page.setViewportSize(viewportSize);\n    await this.page.waitForTimeout(1000); // Wait for layout adjustment\n    \n    // Validate core components are still visible\n    await this.dashboardContainer.waitFor({ timeout: 10000 });\n    \n    // Check that filters are accessible\n    const filtersVisible = await this.emotionFilter.isVisible() && \n                          await this.wardDropdown.isVisible() && \n                          await this.keywordSearch.isVisible();\n    \n    return filtersVisible;\n  }\n\n  // Performance monitoring\n  async measureLoadTime() {\n    const startTime = Date.now();\n    await this.goto();\n    await this.validateCoreComponents();\n    const loadTime = Date.now() - startTime;\n    return loadTime;\n  }\n\n  // Utility methods\n  async waitForDataUpdate() {\n    // Wait for any loading indicators to disappear\n    await this.page.waitForTimeout(1000);\n    \n    // Wait for network requests to complete\n    await this.page.waitForLoadState('networkidle', { timeout: 10000 });\n    \n    // Additional buffer for UI updates\n    await this.page.waitForTimeout(1000);\n  }\n\n  async takeComponentScreenshots(testInfo) {\n    const components = {\n      'dashboard-full': this.dashboardContainer,\n      'strategic-summary': this.strategicSummary,\n      'map-container': this.mapContainer,\n      'sentiment-chart': this.sentimentChart,\n      'competitive-analysis': this.competitiveAnalysis\n    };\n\n    const screenshots = {};\n    for (const [name, locator] of Object.entries(components)) {\n      try {\n        screenshots[name] = await locator.screenshot({ \n          path: `./test-results/screenshots/${testInfo.title}-${name}.png`,\n          type: 'png'\n        });\n      } catch (error) {\n        console.warn(`Failed to capture screenshot for ${name}: ${error.message}`);\n      }\n    }\n    return screenshots;\n  }\n\n  // Data validation methods\n  async validateDataConsistency() {\n    // Check that ward selection is reflected across components\n    const selectedWard = await this.wardDropdown.inputValue();\n    \n    // Strategic summary should reflect selected ward\n    if (selectedWard && selectedWard !== 'All') {\n      const summaryContent = await this.strategicSummary.textContent();\n      // Should contain ward-specific information or \"loading\" state\n      const isRelevant = summaryContent.includes(selectedWard) || \n                        summaryContent.includes('Loading') ||\n                        summaryContent.includes('temporarily unavailable');\n      \n      if (!isRelevant) {\n        console.warn(`Strategic summary may not reflect selected ward: ${selectedWard}`);\n      }\n    }\n  }\n\n  // Authentication validation\n  async validateAuthentication() {\n    // Check if we're still authenticated by looking for dashboard elements\n    const isDashboardVisible = await this.dashboardContainer.isVisible();\n    \n    if (!isDashboardVisible) {\n      // Check if we've been redirected to login\n      const isLoginPage = await this.page.locator('input[type=\"password\"]').isVisible();\n      if (isLoginPage) {\n        throw new Error('User appears to have been logged out');\n      }\n    }\n    \n    return isDashboardVisible;\n  }\n}