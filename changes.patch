diff --git a/backend/app/routes.py b/backend/app/routes.py
--- a/backend/app/routes.py
+++ b/backend/app/routes.py
@@
-@main_bp.route('/alerts/ ', methods=['GET'])
-@login_required
-def get_alerts(ward_name):
+@main_bp.route('/alerts/<ward_name>', methods=['GET'])
+@login_required
+def get_alerts(ward_name):
     alert = Alert.query.filter_by(ward=ward_name).order_by(Alert.created_at.desc()).first()
     if alert:
         return jsonify(alert.to_dict())
     return jsonify({'message': 'No alerts found for this ward.'}), 404

diff --git a/frontend/src/App.jsx b/frontend/src/App.jsx
--- a/frontend/src/App.jsx
+++ b/frontend/src/App.jsx
@@
-import Dashboard from './components/Dashboard';
-import LoginPage from './components/LoginPage';
+import Dashboard from './components/Dashboard';
+import LoginPage from './components/LoginPage';
+import ErrorBoundary from './components/ErrorBoundary';
@@
-    if (!isLoggedIn) {
-        return setIsLoggedIn(true)} />;
-    }
-    if (error) {
-        return {error} ;
-    }
+    if (!isLoggedIn) {
+        return <LoginPage setIsLoggedIn={setIsLoggedIn} />;
+    }
+    if (error) {
+        return <div>{error}</div>;
+    }
@@
-    return (
- 
-  LokDarpan: Political War Room 
- 
- 
- 
- 
- 
- 
-     );
+    return (
+      <ErrorBoundary>
+        <Dashboard
+          filteredData={filteredData}
+          allData={dashboardData.analyticsData || []}
+          geoJsonData={dashboardData.geoJsonData}
+          competitiveData={dashboardData.competitiveData}
+          filters={filters}
+          setFilters={setFilters}
+          searchTerm={searchTerm}
+          setSearchTerm={setSearchTerm}
+          handleChartClick={handleChartClick}
+        />
+      </ErrorBoundary>
+    );
diff --git a/frontend/src/components/ErrorBoundary.jsx b/frontend/src/components/ErrorBoundary.jsx
new file mode 100644
--- /dev/null
+++ b/frontend/src/components/ErrorBoundary.jsx
@@ -0,0 +1,58 @@
+import React from 'react';
+
+/** Error boundary to keep the dashboard resilient. */
+class ErrorBoundary extends React.Component {
+  constructor(props) {
+    super(props);
+    this.state = { hasError: false };
+  }
+
+  static getDerivedStateFromError() {
+    return { hasError: true };
+  }
+
+  componentDidCatch(error, info) {
+    // TODO: send to backend/logger if needed
+    if (process.env.NODE_ENV !== 'production') {
+      // captureOwnerStack is only present in dev builds of React
+      // eslint-disable-next-line no-console
+      console.error('ErrorBoundary caught:', error, info);
+    }
+  }
+
+  render() {
+    if (this.state.hasError) {
+      return (
+        <div style={{padding:'1rem', background:'#fff7ed', border:'1px solid #fed7aa', borderRadius:8}}>
+          <h3>Something went wrong.</h3>
+          <p>The dashboard is still running, but this module failed to render.</p>
+        </div>
+      );
+    }
+    return this.props.children;
+  }
+}
+
+export default ErrorBoundary;
diff --git a/frontend/src/components/LoginPage.jsx b/frontend/src/components/LoginPage.jsx
new file mode 100644
--- /dev/null
+++ b/frontend/src/components/LoginPage.jsx
@@ -0,0 +1,62 @@
+import React, { useState } from 'react';
+import axios from 'axios';
+
+const LoginPage = ({ setIsLoggedIn }) => {
+  const [username, setUsername] = useState('');
+  const [password, setPassword] = useState('');
+  const [error, setError] = useState('');
+
+  const onSubmit = async (e) => {
+    e.preventDefault();
+    setError('');
+    try {
+      axios.defaults.withCredentials = true;
+      const apiUrl = import.meta.env.VITE_API_BASE_URL || '';
+      await axios.post(`${apiUrl}/api/v1/login`, { username, password });
+      setIsLoggedIn(true);
+    } catch (err) {
+      setError('Invalid credentials');
+    }
+  };
+
+  return (
+    <div style={{maxWidth:380, margin:'10vh auto', padding:24, border:'1px solid #eee', borderRadius:12}}>
+      <h2>LokDarpan Login</h2>
+      <form onSubmit={onSubmit}>
+        <div style={{marginTop:12}}>
+          <label>Username</label>
+          <input value={username} onChange={e=>setUsername(e.target.value)} className="input" />
+        </div>
+        <div style={{marginTop:12}}>
+          <label>Password</label>
+          <input type="password" value={password} onChange={e=>setPassword(e.target.value)} className="input" />
+        </div>
+        {error && <div style={{color:'red', marginTop:8}}>{error}</div>}
+        <button type="submit" style={{marginTop:16}}>Log in</button>
+      </form>
+    </div>
+  );
+};
+
+export default LoginPage;
diff --git a/frontend/src/theme.js b/frontend/src/theme.js
new file mode 100644
--- /dev/null
+++ b/frontend/src/theme.js
@@ -0,0 +1,23 @@
+// Centralised emotion colours for consistent charts & tags
+const emotionColors = {
+  Joy: '#10B981',        // Green
+  Positive: '#10B981',
+  Anger: '#EF4444',      // Red
+  Frustration: '#EF4444',
+  Sadness: '#3B82F6',    // Blue
+  Fear: '#8B5CF6',       // Purple
+  Surprise: '#F59E0B',   // Amber
+  Neutral: '#6B7280'     // Gray
+};
+
+export default emotionColors;
diff --git a/frontend/src/components/EmotionChart.jsx b/frontend/src/components/EmotionChart.jsx
new file mode 100644
--- /dev/null
+++ b/frontend/src/components/EmotionChart.jsx
@@ -0,0 +1,61 @@
+import React from 'react';
+import { Pie } from 'react-chartjs-2';
+import { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';
+import emotionColors from '../theme';
+
+ChartJS.register(ArcElement, Tooltip, Legend);
+
+const EmotionChart = ({ data, handleChartClick }) => {
+  if (!data || data.length === 0) {
+    return <div>Loading chart data...</div>;
+  }
+
+  const emotionCounts = data.reduce((acc, item) => {
+    const key = item.emotion || 'Neutral';
+    acc[key] = (acc[key] || 0) + 1;
+    return acc;
+  }, {});
+
+  const labels = Object.keys(emotionCounts);
+  const chartData = {
+    labels,
+    datasets: [{
+      label: '# of Posts',
+      data: labels.map(l => emotionCounts[l]),
+      backgroundColor: labels.map(l => emotionColors[l] || '#6B7280'),
+      borderWidth: 1,
+    }],
+  };
+
+  const options = {
+    onClick: (event, elements) => {
+      if (elements?.length) {
+        const idx = elements[0].index;
+        const label = labels[idx];
+        handleChartClick?.(label);
+      }
+    },
+    responsive: true,
+    maintainAspectRatio: false,
+  };
+
+  return (
+    <div style={{height:300}}>
+      <Pie data={chartData} options={options} />
+    </div>
+  );
+};
+
+export default EmotionChart;
diff --git a/frontend/src/components/CompetitiveAnalysis.jsx b/frontend/src/components/CompetitiveAnalysis.jsx
new file mode 100644
--- /dev/null
+++ b/frontend/src/components/CompetitiveAnalysis.jsx
@@ -0,0 +1,58 @@
+import React from 'react';
+import { Bar } from 'react-chartjs-2';
+import { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';
+import emotionColors from '../theme';
+
+ChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);
+
+const CompetitiveAnalysis = ({ analysisData = {}, handleCompetitorClick }) => {
+  if (!analysisData || Object.keys(analysisData).length === 0) {
+    return <div>Loading analysis...</div>;
+  }
+  const labels = Object.keys(analysisData);
+  // Collect all emotions present across authors
+  const emotions = Array.from(new Set(labels.flatMap(l => Object.keys(analysisData[l] || {}))));
+
+  const datasets = emotions.map(emotion => ({
+    label: emotion,
+    data: labels.map(label => (analysisData[label]?.[emotion] || 0)),
+    backgroundColor: emotionColors[emotion] || '#6B7280',
+    stack: 'sentiment'
+  }));
+
+  const options = {
+    indexAxis: 'y',
+    scales: { x: { stacked: true }, y: { stacked: true } },
+    responsive: true,
+    onClick: (event, elements) => {
+      if (elements?.length) {
+        const idx = elements[0].index;
+        handleCompetitorClick?.(labels[idx]);
+      }
+    }
+  };
+
+  return (
+    <div style={{height:360}}>
+      <Bar data={{ labels, datasets }} options={options} />
+    </div>
+  );
+};
+
+export default CompetitiveAnalysis;
diff --git a/frontend/src/components/DataTable.jsx b/frontend/src/components/DataTable.jsx
new file mode 100644
--- /dev/null
+++ b/frontend/src/components/DataTable.jsx
@@ -0,0 +1,56 @@
+import React from 'react';
+import emotionColors from '../theme';
+
+const Tag = ({ label }) => (
+  <span style={{background: (emotionColors[label]||'#E5E7EB'), color:'#111827', padding:'2px 8px', borderRadius:12, fontSize:12}}>
+    {label}
+  </span>
+);
+
+const DataTable = ({ data = [] }) => {
+  if (!Array.isArray(data)) return <div>Loading feed...</div>;
+
+  return (
+    <div style={{overflowX:'auto'}}>
+      <table style={{width:'100%', borderCollapse:'collapse'}}>
+        <thead>
+          <tr>
+            <th align="left">News Highlight</th>
+            <th align="left">Source</th>
+            <th align="left">Ward</th>
+            <th align="left">Detected Emotion</th>
+          </tr>
+        </thead>
+        <tbody>
+          {data.map((item) => (
+            <tr key={item.id} style={{borderTop:'1px solid #eee'}}>
+              <td>{(item.text||'').slice(0,120)}{(item.text||'').length>120?'...':''}</td>
+              <td>{item.author_name || 'Unknown'}</td>
+              <td>{item.city || ''}</td>
+              <td><Tag label={item.emotion || 'Neutral'} /></td>
+            </tr>
+          ))}
+        </tbody>
+      </table>
+    </div>
+  );
+};
+
+export default DataTable;
diff --git a/frontend/src/components/LocationMap.jsx b/frontend/src/components/LocationMap.jsx
new file mode 100644
--- /dev/null
+++ b/frontend/src/components/LocationMap.jsx
@@ -0,0 +1,57 @@
+import React from 'react';
+import { MapContainer, TileLayer, GeoJSON } from 'react-leaflet';
+import 'leaflet/dist/leaflet.css';
+
+const LocationMap = ({ geoJsonData, setFilters }) => {
+  const handleWardClick = (wardName) => {
+    setFilters?.(prev => ({ ...prev, city: wardName }));
+  };
+
+  const onEachFeature = (feature, layer) => {
+    const wardName = feature.properties?.ghmc_ward;
+    if (wardName) {
+      layer.bindTooltip(wardName, { permanent: true, direction: 'center', className: 'ward-label' });
+      layer.on({
+        click: () => handleWardClick(wardName),
+        mouseover: (e) => e.target.setStyle({ weight: 3, color: '#F59E0B', fillOpacity: 0.9 }),
+        mouseout: (e) => e.target.setStyle({ weight: 1, color: 'white', fillOpacity: 0.6 }),
+      });
+    }
+  };
+
+  if (!geoJsonData) return <div>Loading map...</div>;
+
+  const geoJsonStyle = {
+    fillColor: '#3182CE',
+    weight: 1,
+    opacity: 1,
+    color: 'white',
+    fillOpacity: 0.6,
+  };
+
+  return (
+    <div style={{height: 380}}>
+      <MapContainer center={[17.3850, 78.4867]} zoom={11} style={{ height: '100%', width: '100%' }}>
+        <TileLayer url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png" />
+        <GeoJSON data={geoJsonData} style={geoJsonStyle} onEachFeature={onEachFeature} />
+      </MapContainer>
+    </div>
+  );
+};
+
+export default LocationMap;
diff --git a/frontend/src/components/StrategicSummary.jsx b/frontend/src/components/StrategicSummary.jsx
new file mode 100644
--- /dev/null
+++ b/frontend/src/components/StrategicSummary.jsx
@@ -0,0 +1,124 @@
+import React, { useState, useEffect } from 'react';
+import axios from 'axios';
+
+const StrategicSummary = () => {
+  const [ward, setWard] = useState('Jubilee Hills');
+  const [isLoading, setIsLoading] = useState(false);
+  const [isFetching, setIsFetching] = useState(true);
+  const [briefing, setBriefing] = useState(null);
+  const [statusMessage, setStatusMessage] = useState('');
+  const [error, setError] = useState('');
+
+  useEffect(() => {
+    const fetchLatestBriefing = async () => {
+      if (!ward) return;
+      setIsFetching(true);
+      setBriefing(null);
+      setStatusMessage('');
+      setError('');
+      const apiUrl = import.meta.env.VITE_API_BASE_URL || '';
+      try {
+        const res = await axios.get(`${apiUrl}/api/v1/alerts/${ward}`);
+        if (res.status === 200 && res.data && res.data.opportunities) {
+          const result = JSON.parse(res.data.opportunities);
+          if (result.briefing) {
+            setBriefing(result.briefing);
+          } else {
+            setStatusMessage(result.status || 'No recent briefing available. Generate one now.');
+          }
+        } else {
+          setStatusMessage('No briefing has been generated for this ward yet.');
+        }
+      } catch (_err) {
+        setStatusMessage('No briefing has been generated for this ward yet.');
+      } finally {
+        setIsFetching(false);
+      }
+    };
+    fetchLatestBriefing();
+  }, [ward]);
+
+  const handleTriggerAnalysis = async () => {
+    setIsLoading(true);
+    setError('');
+    setBriefing(null);
+    setStatusMessage('');
+    const apiUrl = import.meta.env.VITE_API_BASE_URL || '';
+    try {
+      await axios.post(`${apiUrl}/api/v1/trigger_analysis`, { ward });
+      let attempts = 0;
+      const interval = setInterval(async () => {
+        if (attempts >= 20) {
+          setError('Analysis is taking longer than expected. Please try again.');
+          setIsLoading(false);
+          clearInterval(interval);
+          return;
+        }
+        try {
+          const res = await axios.get(`${apiUrl}/api/v1/alerts/${ward}`);
+          if (res.status === 200 && res.data && res.data.opportunities) {
+            const result = JSON.parse(res.data.opportunities);
+            if (result.briefing) {
+              setBriefing(result.briefing);
+            } else {
+              setStatusMessage(result.status || '');
+            }
+            setIsLoading(false);
+            clearInterval(interval);
+          }
+        } catch (pollError) {
+          if (pollError?.response?.status !== 404) {
+            setError('An error occurred while fetching results.');
+            setIsLoading(false);
+            clearInterval(interval);
+          }
+        }
+        attempts++;
+      }, 3000);
+    } catch (_err) {
+      setError('Failed to trigger analysis.');
+      setIsLoading(false);
+    }
+  };
+
+  return (
+    <div>
+      <div style={{display:'flex', gap:8, alignItems:'center'}}>
+        <input value={ward} onChange={e=>setWard(e.target.value)} placeholder="Enter Ward Name" />
+        <button onClick={handleTriggerAnalysis} disabled={isLoading}>
+          {isLoading ? 'Analyzing...' : 'Area Pulse'}
+        </button>
+      </div>
+
+      {error && <div style={{color:'red', marginTop:8}}>{error}</div>}
+      {isLoading && <div>Briefing in progress...</div>}
+      {isFetching && !isLoading && <div>Loading latest briefing...</div>}
+      {!isFetching && statusMessage && !briefing && <div>{statusMessage}</div>}
+
+      {!isFetching && briefing && (
+        <div style={{marginTop:12, border:'1px solid #eee', borderRadius:8, padding:12}}>
+          <h3>Candidate Briefing: {ward}</h3>
+          {briefing.key_issue && <p><strong>Key Issue:</strong> {briefing.key_issue}</p>}
+          {briefing.our_angle && (
+            <div style={{marginTop:8}}>
+              <h4>Our Angle (The Narrative)</h4>
+              <p>{briefing.our_angle}</p>
+            </div>
+          )}
+          {briefing.opposition_weakness && (
+            <div style={{marginTop:8}}>
+              <h4>Opposition's Weakness</h4>
+              <p>{briefing.opposition_weakness}</p>
+            </div>
+          )}
+          <div style={{marginTop:8}}>
+            <h4>Recommended Actions (Next 24h)</h4>
+            {Array.isArray(briefing.recommended_actions) && (
+              <ul>
+                {briefing.recommended_actions.map((ra, idx) => (
+                  <li key={idx}><strong>{ra.action}</strong>: {ra.details}</li>
+                ))}
+              </ul>
+            )}
+          </div>
+        </div>
+      )}
+    </div>
+  );
+};
+
+export default StrategicSummary;
diff --git a/frontend/src/components/Dashboard.jsx b/frontend/src/components/Dashboard.jsx
new file mode 100644
--- /dev/null
+++ b/frontend/src/components/Dashboard.jsx
@@ -0,0 +1,79 @@
+import React from 'react';
+import EmotionChart from './EmotionChart';
+import LocationMap from './LocationMap';
+import DataTable from './DataTable';
+import StrategicSummary from './StrategicSummary';
+import CompetitiveAnalysis from './CompetitiveAnalysis';
+
+const Dashboard = ({
+  filteredData,
+  allData = [],
+  geoJsonData,
+  competitiveData,
+  filters,
+  setFilters,
+  searchTerm,
+  setSearchTerm,
+  handleChartClick
+}) => {
+  const emotions = ['All', ...Array.from(new Set(allData.map(i => i.emotion).filter(Boolean)))];
+  const cities = ['All', ...Array.from(new Set(allData.map(i => i.city).filter(Boolean)))];
+
+  const onFilterChange = (e) => {
+    setFilters?.(prev => ({ ...prev, [e.target.name]: e.target.value }));
+  };
+
+  return (
+    <div style={{display:'grid', gap:12}}>
+      {/* Filters */}
+      <div style={{display:'grid', gridTemplateColumns:'repeat(3, minmax(0,1fr))', gap:8}}>
+        <div>
+          <label>Emotion</label>
+          <select name="emotion" value={filters.emotion} onChange={onFilterChange}>
+            {emotions.map(e => <option key={e} value={e}>{e}</option>)}
+          </select>
+        </div>
+        <div>
+          <label>Ward</label>
+          <select name="city" value={filters.city} onChange={onFilterChange}>
+            {cities.map(c => <option key={c} value={c}>{c}</option>)}
+          </select>
+        </div>
+        <div>
+          <label>Keyword Search</label>
+          <input value={searchTerm} onChange={e=>setSearchTerm?.(e.target.value)} placeholder="e.g., roads, festival" />
+        </div>
+      </div>
+
+      {/* Grid */}
+      <div style={{display:'grid', gridTemplateColumns:'2fr 1fr', gap:12}}>
+        <div>
+          <h3>Geospatial Intelligence</h3>
+          <LocationMap geoJsonData={geoJsonData} setFilters={setFilters} />
+        </div>
+        <div>
+          <h3>On‑Demand Strategic Summary</h3>
+          <StrategicSummary />
+        </div>
+      </div>
+
+      <div style={{display:'grid', gridTemplateColumns:'1fr 1fr', gap:12}}>
+        <div>
+          <h3>Sentiment Overview</h3>
+          <EmotionChart data={allData} handleChartClick={handleChartClick} />
+        </div>
+        <div>
+          <h3>Competitive Analysis</h3>
+          <CompetitiveAnalysis analysisData={competitiveData} />
+        </div>
+      </div>
+
+      <div>
+        <h3>Actionable Intelligence Feed</h3>
+        <DataTable data={filteredData} />
+      </div>
+    </div>
+  );
+};
+
+export default Dashboard;
