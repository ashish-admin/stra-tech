name: E2E Tests\n\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main, develop ]\n  schedule:\n    # Run tests daily at 6 AM UTC\n    - cron: '0 6 * * *'\n\njobs:\n  e2e-tests:\n    name: E2E Tests\n    runs-on: ubuntu-latest\n    \n    strategy:\n      fail-fast: false\n      matrix:\n        browser: [chromium, firefox, webkit]\n        shard: [1/4, 2/4, 3/4, 4/4]\n    \n    services:\n      postgres:\n        image: postgres:13\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: amuktha\n          POSTGRES_DB: lokdarpan_test_db\n        options: >-\n          --health-cmd pg_isready\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n        ports:\n          - 5432:5432\n      \n      redis:\n        image: redis:7-alpine\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n        ports:\n          - 6379:6379\n    \n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n        \n      - name: Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: '18'\n          cache: 'npm'\n          cache-dependency-path: 'frontend/package-lock.json'\n      \n      - name: Setup Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.9'\n          cache: 'pip'\n          cache-dependency-path: 'backend/requirements.txt'\n      \n      - name: Install Python dependencies\n        run: |\n          cd backend\n          python -m pip install --upgrade pip\n          pip install -r requirements.txt\n      \n      - name: Install Node.js dependencies\n        run: |\n          cd frontend\n          npm ci\n      \n      - name: Install Playwright browsers\n        run: |\n          cd frontend\n          npx playwright install --with-deps\n      \n      - name: Setup test database\n        env:\n          DATABASE_URL: postgresql://postgres:amuktha@localhost:5432/lokdarpan_test_db\n          FLASK_ENV: testing\n        run: |\n          cd backend\n          python -c \"from app import create_app, db; app = create_app(); app.app_context().push(); db.create_all()\"\n          python scripts/seed_minimal_ward.py\n      \n      - name: Start backend server\n        env:\n          DATABASE_URL: postgresql://postgres:amuktha@localhost:5432/lokdarpan_test_db\n          REDIS_URL: redis://localhost:6379/0\n          FLASK_ENV: testing\n          SECRET_KEY: test-secret-key\n        run: |\n          cd backend\n          nohup python -m flask run --host=0.0.0.0 --port=5000 &\n          sleep 10\n          curl --retry 30 --retry-delay 1 --retry-connrefused http://localhost:5000/api/v1/status\n      \n      - name: Start frontend server\n        env:\n          VITE_API_BASE_URL: http://localhost:5000\n        run: |\n          cd frontend\n          nohup npm run dev -- --host=0.0.0.0 --port=5173 &\n          sleep 10\n          curl --retry 30 --retry-delay 1 --retry-connrefused http://localhost:5173\n      \n      - name: Run E2E tests\n        env:\n          CI: true\n        run: |\n          cd frontend\n          npx playwright test --project=${{ matrix.browser }} --shard=${{ matrix.shard }} --reporter=html,junit,github\n      \n      - name: Upload test results\n        uses: actions/upload-artifact@v4\n        if: always()\n        with:\n          name: test-results-${{ matrix.browser }}-${{ matrix.shard }}\n          path: |\n            test-results/\n            frontend/test-results/\n          retention-days: 7\n      \n      - name: Upload test report\n        uses: actions/upload-artifact@v4\n        if: always()\n        with:\n          name: html-report-${{ matrix.browser }}-${{ matrix.shard }}\n          path: |\n            test-results/html/\n            frontend/playwright-report/\n          retention-days: 7\n      \n      - name: Upload screenshots\n        uses: actions/upload-artifact@v4\n        if: failure()\n        with:\n          name: screenshots-${{ matrix.browser }}-${{ matrix.shard }}\n          path: test-results/screenshots/\n          retention-days: 7\n\n  visual-regression:\n    name: Visual Regression Tests\n    runs-on: ubuntu-latest\n    if: github.event_name == 'pull_request'\n    \n    services:\n      postgres:\n        image: postgres:13\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: amuktha\n          POSTGRES_DB: lokdarpan_test_db\n        options: >-\n          --health-cmd pg_isready\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n        ports:\n          - 5432:5432\n      \n      redis:\n        image: redis:7-alpine\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n        ports:\n          - 6379:6379\n    \n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n      \n      - name: Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: '18'\n          cache: 'npm'\n          cache-dependency-path: 'frontend/package-lock.json'\n      \n      - name: Setup Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.9'\n          cache: 'pip'\n          cache-dependency-path: 'backend/requirements.txt'\n      \n      - name: Install dependencies\n        run: |\n          cd backend && pip install -r requirements.txt\n          cd frontend && npm ci\n          npx playwright install chromium\n      \n      - name: Setup test environment\n        env:\n          DATABASE_URL: postgresql://postgres:amuktha@localhost:5432/lokdarpan_test_db\n          FLASK_ENV: testing\n        run: |\n          cd backend\n          python -c \"from app import create_app, db; app = create_app(); app.app_context().push(); db.create_all()\"\n          python scripts/seed_minimal_ward.py\n      \n      - name: Start servers\n        run: |\n          cd backend && nohup python -m flask run --host=0.0.0.0 --port=5000 &\n          cd frontend && nohup npm run dev -- --host=0.0.0.0 --port=5173 &\n          sleep 15\n      \n      - name: Run visual regression tests\n        run: |\n          npx playwright test tests/e2e/visual-regression.spec.js --project=chromium --reporter=html\n      \n      - name: Upload visual test results\n        uses: actions/upload-artifact@v4\n        if: always()\n        with:\n          name: visual-regression-results\n          path: |\n            test-results/\n            test-results/html/\n          retention-days: 14\n\n  performance-tests:\n    name: Performance Tests\n    runs-on: ubuntu-latest\n    if: github.event_name == 'schedule' || contains(github.event.pull_request.labels.*.name, 'performance')\n    \n    services:\n      postgres:\n        image: postgres:13\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: amuktha\n          POSTGRES_DB: lokdarpan_test_db\n        options: >-\n          --health-cmd pg_isready\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n        ports:\n          - 5432:5432\n      \n      redis:\n        image: redis:7-alpine\n        ports:\n          - 6379:6379\n    \n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n      \n      - name: Setup environment\n        uses: actions/setup-node@v4\n        with:\n          node-version: '18'\n          cache: 'npm'\n          cache-dependency-path: 'frontend/package-lock.json'\n      \n      - name: Setup Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.9'\n          cache: 'pip'\n          cache-dependency-path: 'backend/requirements.txt'\n      \n      - name: Install dependencies\n        run: |\n          cd backend && pip install -r requirements.txt\n          cd frontend && npm ci && npx playwright install chromium\n      \n      - name: Setup performance test environment\n        env:\n          DATABASE_URL: postgresql://postgres:amuktha@localhost:5432/lokdarpan_test_db\n        run: |\n          cd backend\n          python -c \"from app import create_app, db; app = create_app(); app.app_context().push(); db.create_all()\"\n          python scripts/seed_comprehensive_political_data.py\n      \n      - name: Start servers with production settings\n        env:\n          FLASK_ENV: production\n          NODE_ENV: production\n        run: |\n          cd backend && nohup python -m flask run --host=0.0.0.0 --port=5000 &\n          cd frontend && npm run build && nohup npm run preview -- --host=0.0.0.0 --port=5173 &\n          sleep 20\n      \n      - name: Run performance tests\n        run: |\n          npx playwright test tests/e2e/performance.spec.js --project=performance --reporter=html,json\n      \n      - name: Analyze performance results\n        run: |\n          node -e \"\n          const results = require('./test-results/test-results.json');\n          const perfTests = results.suites.find(s => s.title.includes('Performance'));\n          if (perfTests) {\n            console.log('Performance Test Results:');\n            perfTests.specs.forEach(spec => {\n              console.log(\\`- \\${spec.title}: \\${spec.tests[0].status}\\`);\n            });\n          }\n          \"\n      \n      - name: Upload performance results\n        uses: actions/upload-artifact@v4\n        if: always()\n        with:\n          name: performance-test-results\n          path: |\n            test-results/\n            test-results/json/\n          retention-days: 30\n\n  test-summary:\n    name: Test Summary\n    runs-on: ubuntu-latest\n    needs: [e2e-tests]\n    if: always()\n    \n    steps:\n      - name: Download test artifacts\n        uses: actions/download-artifact@v4\n        with:\n          pattern: test-results-*\n          merge-multiple: true\n      \n      - name: Generate test summary\n        run: |\n          echo \"## E2E Test Results\" >> $GITHUB_STEP_SUMMARY\n          \n          # Count test results by browser\n          for browser in chromium firefox webkit; do\n            echo \"### $browser Results\" >> $GITHUB_STEP_SUMMARY\n            \n            passed=$(find . -name \"*$browser*\" -name \"*.json\" -exec grep -l '\"status\":\"passed\"' {} \\; | wc -l)\n            failed=$(find . -name \"*$browser*\" -name \"*.json\" -exec grep -l '\"status\":\"failed\"' {} \\; | wc -l)\n            \n            echo \"- ✅ Passed: $passed\" >> $GITHUB_STEP_SUMMARY\n            echo \"- ❌ Failed: $failed\" >> $GITHUB_STEP_SUMMARY\n            echo \"\" >> $GITHUB_STEP_SUMMARY\n          done\n          \n          echo \"## Test Coverage Areas\" >> $GITHUB_STEP_SUMMARY\n          echo \"- 🖥️  Dashboard Component Testing\" >> $GITHUB_STEP_SUMMARY\n          echo \"- 🧩 Individual Component Testing\" >> $GITHUB_STEP_SUMMARY\n          echo \"- 🔄 User Interaction Workflows\" >> $GITHUB_STEP_SUMMARY\n          echo \"- 🚨 Error Boundary Validation\" >> $GITHUB_STEP_SUMMARY\n          echo \"- ⚡ Performance & Core Web Vitals\" >> $GITHUB_STEP_SUMMARY\n          echo \"- 📸 Visual Regression Testing\" >> $GITHUB_STEP_SUMMARY\n      \n      - name: Comment test results on PR\n        if: github.event_name == 'pull_request'\n        uses: actions/github-script@v7\n        with:\n          script: |\n            const fs = require('fs');\n            const summary = fs.readFileSync(process.env.GITHUB_STEP_SUMMARY, 'utf8');\n            \n            github.rest.issues.createComment({\n              issue_number: context.issue.number,\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              body: summary\n            });