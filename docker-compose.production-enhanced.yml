version: '3.8'

services:
  # PostgreSQL Database with Performance Optimizations
  postgres:
    image: postgres:15-alpine
    container_name: lokdarpan-postgres
    restart: always
    environment:
      POSTGRES_DB: lokdarpan_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.utf8"
    command: [
      "postgres",
      # Performance optimizations for political data processing
      "-c", "max_connections=200",
      "-c", "shared_buffers=256MB",
      "-c", "effective_cache_size=1GB",
      "-c", "work_mem=8MB",
      "-c", "maintenance_work_mem=128MB",
      "-c", "checkpoint_completion_target=0.9",
      "-c", "wal_buffers=16MB",
      "-c", "default_statistics_target=100",
      "-c", "random_page_cost=1.1",
      "-c", "effective_io_concurrency=200",
      # Security hardening
      "-c", "ssl=on",
      "-c", "ssl_cert_file=/var/lib/postgresql/server.crt",
      "-c", "ssl_key_file=/var/lib/postgresql/server.key",
      "-c", "log_connections=on",
      "-c", "log_disconnections=on",
      "-c", "log_statement=mod"
    ]
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/init-db-enhanced.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./certs/postgres:/var/lib/postgresql/certs:ro
    ports:
      - "127.0.0.1:5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -h localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - lokdarpan-network
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # Redis with Optimized Configuration
  redis:
    image: redis:7-alpine
    container_name: lokdarpan-redis
    restart: always
    command: [
      "redis-server",
      "--appendonly", "yes",
      "--maxmemory", "512mb",
      "--maxmemory-policy", "allkeys-lru",
      "--save", "300 10",
      "--save", "60 1000",
      # Security hardening
      "--requirepass", "${REDIS_PASSWORD}",
      "--protected-mode", "yes",
      # Performance optimization
      "--tcp-backlog", "511",
      "--timeout", "300",
      "--tcp-keepalive", "60"
    ]
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/etc/redis/redis.conf:ro
    ports:
      - "127.0.0.1:6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - lokdarpan-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 768M
        reservations:
          cpus: '0.1'
          memory: 128M
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Enhanced Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.production-enhanced
      args:
        BUILD_ENV: production
    container_name: lokdarpan-backend
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      FLASK_ENV: production
      SECRET_KEY: ${SECRET_KEY}
      DATABASE_URL: postgresql://postgres:${DB_PASSWORD}@postgres:5432/lokdarpan_db?sslmode=prefer
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD}@redis:6379/1
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD}@redis:6379/2
      # Enhanced CORS for production
      CORS_ORIGINS: ${CORS_ORIGINS}
      # AI Service Configuration
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      PERPLEXITY_API_KEY: ${PERPLEXITY_API_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      NEWS_API_KEY: ${NEWS_API_KEY}
      TWITTER_BEARER_TOKEN: ${TWITTER_BEARER_TOKEN}
      # Performance and Security
      GUNICORN_WORKERS: 4
      GUNICORN_THREADS: 2
      GUNICORN_WORKER_CLASS: gevent
      GUNICORN_WORKER_CONNECTIONS: 1000
      WEB_CONCURRENCY: 4
      # Monitoring and Logging
      LOG_LEVEL: INFO
      ENABLE_METRICS: true
      SENTRY_DSN: ${SENTRY_DSN:-}
      # Geographic optimization for India
      ANALYTICS_REGION: asia-south1
      TIME_ZONE: Asia/Kolkata
    volumes:
      - ./backend/data:/app/data
      - ./backend/logs:/app/logs
      - ./certs:/app/certs:ro
    networks:
      - lokdarpan-network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`${DOMAIN_NAME}`) && PathPrefix(`/api`)"
      - "traefik.http.services.backend.loadbalancer.server.port=5000"
      - "traefik.http.routers.backend.tls=true"
      - "traefik.http.routers.backend.tls.certresolver=letsencrypt"

  # Enhanced Celery Worker with AI Task Optimization
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.production-enhanced
    container_name: lokdarpan-celery-worker
    restart: always
    command: >
      celery -A celery_worker.celery worker
      --loglevel=info
      --concurrency=4
      --queues=high_priority,default,ai_analysis,low_priority
      --max-tasks-per-child=1000
      --max-memory-per-child=300000
      --time-limit=1800
      --soft-time-limit=1200
      --without-heartbeat
      --without-gossip
      --without-mingle
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
    environment:
      FLASK_ENV: production
      SECRET_KEY: ${SECRET_KEY}
      DATABASE_URL: postgresql://postgres:${DB_PASSWORD}@postgres:5432/lokdarpan_db?sslmode=prefer
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/1
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD}@redis:6379/1
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD}@redis:6379/2
      # AI Service Configuration
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      PERPLEXITY_API_KEY: ${PERPLEXITY_API_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      NEWS_API_KEY: ${NEWS_API_KEY}
      # Worker optimization
      CELERY_WORKER_PREFETCH_MULTIPLIER: 1
      CELERY_TASK_ACKS_LATE: true
      CELERY_WORKER_DISABLE_RATE_LIMITS: false
    volumes:
      - ./backend/data:/app/data
      - ./backend/logs:/app/logs
    networks:
      - lokdarpan-network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1.5G
        reservations:
          cpus: '0.5'
          memory: 256M
    healthcheck:
      test: ["CMD", "celery", "-A", "celery_worker.celery", "inspect", "ping"]
      interval: 60s
      timeout: 30s
      retries: 3

  # Celery Beat Scheduler with Enhanced Reliability
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile.production-enhanced
    container_name: lokdarpan-celery-beat
    restart: always
    command: celery -A celery_worker.celery beat --loglevel=info --schedule=/app/celerybeat-schedule --pidfile=/tmp/celerybeat.pid
    depends_on:
      redis:
        condition: service_healthy
    environment:
      FLASK_ENV: production
      SECRET_KEY: ${SECRET_KEY}
      DATABASE_URL: postgresql://postgres:${DB_PASSWORD}@postgres:5432/lokdarpan_db?sslmode=prefer
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/1
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD}@redis:6379/1
    volumes:
      - celery_beat_data:/app/celerybeat-schedule
      - ./backend/logs:/app/logs
    networks:
      - lokdarpan-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  # Enhanced Frontend with Runtime Configuration
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.production-enhanced
      args:
        NODE_ENV: production
        VITE_API_BASE_URL: ""
        VITE_APP_VERSION: ${APP_VERSION:-1.0.0}
    container_name: lokdarpan-frontend
    restart: always
    depends_on:
      - backend
    environment:
      # Runtime configuration injection
      RUNTIME_CONFIG: |
        {
          "API_BASE_URL": "/api",
          "DOMAIN_NAME": "${DOMAIN_NAME}",
          "STRATEGIST_ENABLED": true,
          "ANALYTICS_REGION": "india",
          "CDN_URL": "${CDN_URL:-}",
          "ENVIRONMENT": "production"
        }
    networks:
      - lokdarpan-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`${DOMAIN_NAME}`)"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"
      - "traefik.http.routers.frontend.tls=true"
      - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"
      # Compression and caching middleware
      - "traefik.http.routers.frontend.middlewares=gzip,cache-headers"

  # Enhanced Traefik with Geographic Optimization
  traefik:
    image: traefik:v3.0
    container_name: lokdarpan-traefik
    restart: always
    command:
      # API Configuration
      - "--api.insecure=false"
      - "--api.dashboard=true"
      - "--api.debug=false"
      # Providers
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=lokdarpan-network"
      # Entry Points
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      # HTTP to HTTPS Redirect
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.web.http.redirections.entrypoint.permanent=true"
      # Let's Encrypt SSL
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.letsencrypt.acme.email=${LETSENCRYPT_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      # Production Let's Encrypt (remove for staging)
      # - "--certificatesresolvers.letsencrypt.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      # Security enhancements
      - "--global.sendAnonymousUsage=false"
      # Metrics and monitoring
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.addEntryPointsLabels=true"
      - "--metrics.prometheus.addServicesLabels=true"
      # Access logs
      - "--accesslog=true"
      - "--accesslog.filepath=/var/log/access.log"
      # Geographic optimization
      - "--ping=true"
    ports:
      - "80:80"
      - "443:443"
      - "127.0.0.1:8080:8080"  # Dashboard (local only)
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./letsencrypt:/letsencrypt
      - ./traefik/logs:/var/log
    networks:
      - lokdarpan-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
    labels:
      - "traefik.enable=true"
      # Dashboard access (secure)
      - "traefik.http.routers.traefik.rule=Host(`${DOMAIN_NAME}`) && PathPrefix(`/dashboard`)"
      - "traefik.http.routers.traefik.tls=true"
      - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"
      - "traefik.http.routers.traefik.middlewares=auth"
      # Basic auth for dashboard
      - "traefik.http.middlewares.auth.basicauth.users=${TRAEFIK_AUTH_USER}:${TRAEFIK_AUTH_PASSWORD_HASH}"
      # Middleware definitions
      - "traefik.http.middlewares.gzip.compress=true"
      - "traefik.http.middlewares.cache-headers.headers.customrequestheaders.Cache-Control=public, max-age=3600"

  # Prometheus Monitoring (Optional but Recommended)
  prometheus:
    image: prom/prometheus:latest
    container_name: lokdarpan-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "127.0.0.1:9090:9090"
    networks:
      - lokdarpan-network
    profiles:
      - monitoring
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Grafana Dashboard (Optional but Recommended)
  grafana:
    image: grafana/grafana:latest
    container_name: lokdarpan-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "127.0.0.1:3000:3000"
    networks:
      - lokdarpan-network
    profiles:
      - monitoring
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 256M

networks:
  lokdarpan-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  celery_beat_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local