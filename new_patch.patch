diff --git a/frontend/src/components/ErrorBoundary.jsx b/frontend/src/components/ErrorBoundary.jsx
new file mode 100644
index 0000000..e9653d6
--- /dev/null
+++ b/frontend/src/components/ErrorBoundary.jsx
@@
+import React from 'react';
+
+/**
+ * A reusable error boundary component. This component catches JavaScript
+ * errors in its child component tree and displays a fallback UI instead of
+ * crashing the entire application. It also logs the error details to the
+ * console. Use this to wrap around sections of the app so that a single
+ * component failure doesn't break the whole page.
+ */
+class ErrorBoundary extends React.Component {
+  constructor(props) {
+    super(props);
+    this.state = { hasError: false };
+  }
+
+  /**
+   * Update state so the next render will show the fallback UI.
+   */
+  static getDerivedStateFromError(error) {
+    return { hasError: true };
+  }
+
+  /**
+   * Log the error and error information. In production you could send
+   * this information to an error reporting service.
+   */
+  componentDidCatch(error, errorInfo) {
+    console.error('ErrorBoundary caught an error', error, errorInfo);
+  }
+
+  render() {
+    if (this.state.hasError) {
+      return <div>Something went wrong. Please refresh the page.</div>;
+    }
+    return this.props.children;
+  }
+}
+
+export default ErrorBoundary;

diff --git a/frontend/src/theme.js b/frontend/src/theme.js
new file mode 100644
index 0000000..6280be0
--- /dev/null
+++ b/frontend/src/theme.js
@@
+// Centralised theme definitions for the LokDarpan dashboard.
+// Defining colours in a single file ensures consistency across
+// components and makes it easy to update the palette in the future.
+
+const emotionColors = {
+  Joy: '#10B981',        // Green – positive / joy
+  Positive: '#10B981',   // Same as Joy
+  Anger: '#EF4444',      // Red – anger / frustration
+  Frustration: '#EF4444',
+  Sadness: '#3B82F6',    // Blue – sadness
+  Fear: '#8B5CF6',       // Purple – fear
+  Surprise: '#F59E0B',   // Amber – surprise
+  Neutral: '#6B7280'     // Gray – neutral
+};
+
+export default emotionColors;

diff --git a/frontend/src/components/StrategicSummary.jsx b/frontend/src/components/StrategicSummary.jsx
index 1234567..89abcde 100644
--- a/frontend/src/components/StrategicSummary.jsx
+++ b/frontend/src/components/StrategicSummary.jsx
@@
-            <div>
-            <strong>Recommended Actions (Next 24h):</strong>
-            <ul>
-            {(briefing?.recommendedActions ?? []).map((item, index) => {
-                if (typeof item === 'string') {
-                return <li key={index}>{item}</li>;
-                } else if (item && typeof item === 'object') {
-                return (
-                    <li key={index}>
-                    {item.action ?? 'No action'} – {item.timeline ?? 'No timeline'}
-                    </li>
-                );
-                } else {
-                return null;
-                }
-            })}
-            </ul>
-            </div>
+            <div>
+            <strong>Recommended Actions (Next 24h):</strong>
+            {/* Safely render the recommended actions list. Each item can be a string or an object. */}
+            {Array.isArray(briefing.recommended_actions) && (
+              <ul className="list-decimal list-outside ml-5 mt-2 space-y-2 text-blue-900">
+                {briefing.recommended_actions.map((item, index) => {
+                  // If the item is a plain string, render it directly
+                  if (typeof item === 'string') {
+                    return <li key={index}>{item}</li>;
+                  }
+                  // If it's an object, display the action and optional timeline
+                  if (item && typeof item === 'object') {
+                    return (
+                      <li key={index}>
+                        <strong>{item.action ?? 'Action'}</strong>
+                        {item.timeline ? ` – ${item.timeline}` : null}
+                      </li>
+                    );
+                  }
+                  // Otherwise render nothing
+                  return null;
+                })}
+              </ul>
+            )}
+            </div>
diff --git a/frontend/src/App.jsx b/frontend/src/App.jsx
index 1111111..2222222 100644
--- a/frontend/src/App.jsx
+++ b/frontend/src/App.jsx
@@
-import Dashboard from './components/Dashboard';
-import LoginPage from './components/LoginPage';
+import Dashboard from './components/Dashboard';
+import LoginPage from './components/LoginPage';
+import ErrorBoundary from './components/ErrorBoundary';
@@
   if (error) {
     return <div>{error}</div>;
   }
-  return (
-    <div className="container mx-auto px-4 py-6">
-      <h1 className="text-2xl font-bold mb-4">LokDarpan: Political War Room</h1>
-      <Dashboard
-        filteredData={filteredData}
-        allData={dashboardData.analyticsData || []}
-        geoJsonData={dashboardData.geoJsonData}
-        competitiveData={dashboardData.competitiveData}
-        filters={filters}
-        setFilters={setFilters}
-        searchTerm={searchTerm}
-        setSearchTerm={setSearchTerm}
-        handleChartClick={handleChartClick}
-      />
-    </div>
-  );
+  return (
+    <div className="container mx-auto px-4 py-6">
+      <h1 className="text-2xl font-bold mb-4">LokDarpan: Political War Room</h1>
+      <ErrorBoundary>
+        <Dashboard
+          filteredData={filteredData}
+          allData={dashboardData.analyticsData || []}
+          geoJsonData={dashboardData.geoJsonData}
+          competitiveData={dashboardData.competitiveData}
+          filters={filters}
+          setFilters={setFilters}
+          searchTerm={searchTerm}
+          setSearchTerm={setSearchTerm}
+          handleChartClick={handleChartClick}
+        />
+      </ErrorBoundary>
+    </div>
+  );
diff --git a/backend/app/routes.py b/backend/app/routes.py
index 3333333..4444444 100644
--- a/backend/app/routes.py
+++ b/backend/app/routes.py
@@
-@main_bp.route('/alerts/ ', methods=['GET'])
-@login_required
-def get_alerts(ward_name):
+@main_bp.route('/alerts/<ward_name>', methods=['GET'])
+@login_required
+def get_alerts(ward_name):
