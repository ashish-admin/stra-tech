version: '3.8'

# LokDarpan Phase 1 - Production Network Deployment
# Advanced Traefik, SSL/TLS, and Geographic Optimization Configuration

services:
  # PostgreSQL Database - Optimized for Indian timezone
  postgres:
    image: postgres:15-alpine
    container_name: lokdarpan-postgres
    restart: always
    environment:
      POSTGRES_DB: lokdarpan_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_IN.utf8 --timezone=Asia/Kolkata"
      TZ: Asia/Kolkata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/init-db.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./deployment/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    ports:
      - "127.0.0.1:5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - lokdarpan-internal
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Redis Cache - Optimized for campaign data
  redis:
    image: redis:7-alpine
    container_name: lokdarpan-redis
    restart: always
    command: |
      redis-server
      --appendonly yes
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --timeout 300
      --tcp-keepalive 300
      --save 900 1 300 10 60 10000
    volumes:
      - redis_data:/data
      - ./deployment/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "127.0.0.1:6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 15s
      timeout: 3s
      retries: 3
      start_period: 30s
    networks:
      - lokdarpan-internal
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Backend API - Production optimized
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.production-enhanced
      args:
        BUILD_ENV: production
        PYTHON_VERSION: 3.11-slim
    container_name: lokdarpan-backend
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Core Flask Configuration
      FLASK_ENV: production
      FLASK_DEBUG: false
      SECRET_KEY: ${SECRET_KEY}
      WTF_CSRF_TIME_LIMIT: 3600
      
      # Database Configuration
      DATABASE_URL: postgresql://postgres:${DB_PASSWORD}@postgres:5432/lokdarpan_db
      SQLALCHEMY_ENGINE_OPTIONS: '{"pool_size": 20, "max_overflow": 30, "pool_pre_ping": true, "pool_recycle": 300}'
      
      # Redis Configuration
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/1
      
      # CORS Configuration for production domains
      CORS_ORIGINS: ${CORS_ORIGINS}
      
      # AI Service Configuration
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      PERPLEXITY_API_KEY: ${PERPLEXITY_API_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      NEWS_API_KEY: ${NEWS_API_KEY}
      TWITTER_BEARER_TOKEN: ${TWITTER_BEARER_TOKEN}
      
      # Performance & Security
      GUNICORN_WORKERS: 4
      GUNICORN_THREADS: 2
      GUNICORN_TIMEOUT: 120
      MAX_CONTENT_LENGTH: 16777216  # 16MB
      
      # Timezone Configuration
      TZ: Asia/Kolkata
      
      # Monitoring Configuration
      ENABLE_METRICS: true
      METRICS_PORT: 9090
      
      # Rate Limiting
      RATELIMIT_STORAGE_URL: redis://redis:6379/2
      RATELIMIT_DEFAULT: "1000 per hour, 100 per minute"
      
      # Political Strategist Configuration
      STRATEGIST_TIMEOUT: 30
      STRATEGIST_CACHE_TTL: 300
      SSE_HEARTBEAT_INTERVAL: 30
      
    volumes:
      - ./backend/data:/app/data
      - ./backend/logs:/app/logs
      - ./deployment/ssl:/app/ssl:ro
    networks:
      - lokdarpan-internal
      - lokdarpan-public
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.5'
        reservations:
          memory: 512M
          cpus: '0.5'
    labels:
      # Traefik API routing
      - "traefik.enable=true"
      - "traefik.docker.network=lokdarpan-public"
      
      # API Routes with SSL
      - "traefik.http.routers.api.rule=Host(`${DOMAIN_NAME}`) && PathPrefix(`/api`)"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.routers.api.tls=true"
      - "traefik.http.routers.api.tls.certresolver=letsencrypt"
      - "traefik.http.services.api.loadbalancer.server.port=5000"
      
      # SSE Streaming configuration
      - "traefik.http.routers.sse.rule=Host(`${DOMAIN_NAME}`) && PathPrefix(`/api/v1/strategist/stream`)"
      - "traefik.http.routers.sse.entrypoints=websecure"
      - "traefik.http.routers.sse.tls=true"
      - "traefik.http.routers.sse.tls.certresolver=letsencrypt"
      - "traefik.http.services.sse.loadbalancer.server.port=5000"
      
      # Middleware for API security
      - "traefik.http.routers.api.middlewares=api-headers,api-ratelimit"
      - "traefik.http.routers.sse.middlewares=sse-headers"
      
      # Security Headers
      - "traefik.http.middlewares.api-headers.headers.customrequestheaders.X-Forwarded-Proto=https"
      - "traefik.http.middlewares.api-headers.headers.customresponseheaders.X-Content-Type-Options=nosniff"
      - "traefik.http.middlewares.api-headers.headers.customresponseheaders.X-Frame-Options=DENY"
      - "traefik.http.middlewares.api-headers.headers.customresponseheaders.X-XSS-Protection=1; mode=block"
      - "traefik.http.middlewares.api-headers.headers.customresponseheaders.Strict-Transport-Security=max-age=31536000; includeSubDomains"
      
      # SSE Headers
      - "traefik.http.middlewares.sse-headers.headers.customresponseheaders.Cache-Control=no-cache"
      - "traefik.http.middlewares.sse-headers.headers.customresponseheaders.Connection=keep-alive"
      - "traefik.http.middlewares.sse-headers.headers.customresponseheaders.Access-Control-Allow-Credentials=true"
      
      # Rate Limiting
      - "traefik.http.middlewares.api-ratelimit.ratelimit.average=100"
      - "traefik.http.middlewares.api-ratelimit.ratelimit.period=1m"
      - "traefik.http.middlewares.api-ratelimit.ratelimit.burst=50"

  # Celery Worker - Campaign data processing
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.production-enhanced
    container_name: lokdarpan-celery-worker
    restart: always
    command: |
      celery -A celery_worker.celery worker
      --loglevel=info
      --concurrency=4
      --max-tasks-per-child=100
      --prefetch-multiplier=1
      --time-limit=300
      --soft-time-limit=240
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      FLASK_ENV: production
      SECRET_KEY: ${SECRET_KEY}
      DATABASE_URL: postgresql://postgres:${DB_PASSWORD}@postgres:5432/lokdarpan_db
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/1
      TZ: Asia/Kolkata
      # AI Service Keys
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      PERPLEXITY_API_KEY: ${PERPLEXITY_API_KEY}
      NEWS_API_KEY: ${NEWS_API_KEY}
    volumes:
      - ./backend/data:/app/data
      - ./backend/logs:/app/logs
    networks:
      - lokdarpan-internal
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'

  # Celery Beat Scheduler - Campaign timeline automation
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile.production-enhanced
    container_name: lokdarpan-celery-beat
    restart: always
    command: celery -A celery_worker.celery beat --loglevel=info --pidfile=/tmp/celerybeat.pid
    depends_on:
      redis:
        condition: service_healthy
    environment:
      FLASK_ENV: production
      SECRET_KEY: ${SECRET_KEY}
      DATABASE_URL: postgresql://postgres:${DB_PASSWORD}@postgres:5432/lokdarpan_db
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/1
      TZ: Asia/Kolkata
    volumes:
      - ./backend/celerybeat-schedule:/app/celerybeat-schedule
      - ./backend/logs:/app/logs
    networks:
      - lokdarpan-internal
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # Frontend - Political dashboard
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.production-enhanced
      args:
        VITE_API_BASE_URL: https://${DOMAIN_NAME}
        VITE_APP_NAME: LokDarpan
        VITE_BUILD_MODE: production
    container_name: lokdarpan-frontend
    restart: always
    depends_on:
      - backend
    networks:
      - lokdarpan-public
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=lokdarpan-public"
      
      # Main application routing
      - "traefik.http.routers.app.rule=Host(`${DOMAIN_NAME}`)"
      - "traefik.http.routers.app.entrypoints=websecure"
      - "traefik.http.routers.app.tls=true"
      - "traefik.http.routers.app.tls.certresolver=letsencrypt"
      - "traefik.http.services.app.loadbalancer.server.port=80"
      - "traefik.http.routers.app.middlewares=frontend-headers,gzip"
      
      # Frontend Security Headers
      - "traefik.http.middlewares.frontend-headers.headers.customresponseheaders.X-Content-Type-Options=nosniff"
      - "traefik.http.middlewares.frontend-headers.headers.customresponseheaders.X-Frame-Options=DENY"
      - "traefik.http.middlewares.frontend-headers.headers.customresponseheaders.X-XSS-Protection=1; mode=block"
      - "traefik.http.middlewares.frontend-headers.headers.customresponseheaders.Strict-Transport-Security=max-age=31536000; includeSubDomains"
      - "traefik.http.middlewares.frontend-headers.headers.customresponseheaders.Content-Security-Policy=default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; connect-src 'self' https:; font-src 'self' data:;"
      
      # Compression
      - "traefik.http.middlewares.gzip.compress=true"

  # Traefik Reverse Proxy - Advanced configuration
  traefik:
    image: traefik:v3.0
    container_name: lokdarpan-traefik
    restart: always
    command:
      # Global Configuration
      - "--global.checkNewVersion=false"
      - "--global.sendAnonymousUsage=false"
      
      # API Configuration
      - "--api.dashboard=true"
      - "--api.insecure=false"
      
      # Providers
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=lokdarpan-public"
      
      # Entry Points
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.traefik.address=:8080"
      
      # HTTP to HTTPS redirect
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.web.http.redirections.entrypoint.permanent=true"
      
      # Let's Encrypt Configuration
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.letsencrypt.acme.email=${LETSENCRYPT_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.letsencrypt.acme.keytype=EC256"
      
      # Logging
      - "--log.level=INFO"
      - "--log.filepath=/logs/traefik.log"
      - "--accesslog=true"
      - "--accesslog.filepath=/logs/access.log"
      - "--accesslog.format=json"
      
      # Metrics for monitoring
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.addRoutersLabels=true"
      
      # Rate limiting defaults
      - "--entrypoints.websecure.http.middlewares=default-ratelimit@docker"
      
    ports:
      - "80:80"    # HTTP
      - "443:443"  # HTTPS
      - "${TRAEFIK_DASHBOARD_PORT:-8080}:8080"  # Dashboard (restricted)
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./deployment/letsencrypt:/letsencrypt
      - ./deployment/logs:/logs
    networks:
      - lokdarpan-public
    environment:
      - CF_API_EMAIL=${CLOUDFLARE_EMAIL}
      - CF_API_KEY=${CLOUDFLARE_API_KEY}
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=lokdarpan-public"
      
      # Dashboard (admin only)
      - "traefik.http.routers.traefik-dashboard.rule=Host(`admin.${DOMAIN_NAME}`)"
      - "traefik.http.routers.traefik-dashboard.entrypoints=websecure"
      - "traefik.http.routers.traefik-dashboard.tls=true"
      - "traefik.http.routers.traefik-dashboard.tls.certresolver=letsencrypt"
      - "traefik.http.routers.traefik-dashboard.service=api@internal"
      - "traefik.http.routers.traefik-dashboard.middlewares=traefik-auth"
      
      # Dashboard authentication
      - "traefik.http.middlewares.traefik-auth.basicauth.users=${TRAEFIK_ADMIN_AUTH}"
      
      # Default rate limiting
      - "traefik.http.middlewares.default-ratelimit.ratelimit.average=200"
      - "traefik.http.middlewares.default-ratelimit.ratelimit.period=1m"
      - "traefik.http.middlewares.default-ratelimit.ratelimit.burst=100"

  # Monitoring - Prometheus metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: lokdarpan-prometheus
    restart: always
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.external-url=https://metrics.${DOMAIN_NAME}'
    volumes:
      - ./deployment/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - lokdarpan-internal
      - lokdarpan-public
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=lokdarpan-public"
      - "traefik.http.routers.metrics.rule=Host(`metrics.${DOMAIN_NAME}`)"
      - "traefik.http.routers.metrics.entrypoints=websecure"
      - "traefik.http.routers.metrics.tls=true"
      - "traefik.http.routers.metrics.tls.certresolver=letsencrypt"
      - "traefik.http.services.metrics.loadbalancer.server.port=9090"
      - "traefik.http.routers.metrics.middlewares=metrics-auth"
      - "traefik.http.middlewares.metrics-auth.basicauth.users=${METRICS_AUTH}"

  # Health Check Service
  healthcheck:
    build:
      context: ./deployment/healthcheck
      dockerfile: Dockerfile
    container_name: lokdarpan-healthcheck
    restart: always
    depends_on:
      - backend
      - frontend
    environment:
      - CHECK_INTERVAL=30
      - BACKEND_URL=http://backend:5000
      - DOMAIN_NAME=${DOMAIN_NAME}
    networks:
      - lokdarpan-internal
    deploy:
      resources:
        limits:
          memory: 64M
          cpus: '0.1'

networks:
  lokdarpan-public:
    driver: bridge
    enable_ipv6: false
    ipam:
      config:
        - subnet: 172.20.0.0/16
  lokdarpan-internal:
    driver: bridge
    internal: true
    enable_ipv6: false
    ipam:
      config:
        - subnet: 172.21.0.0/16

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH}/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH}/redis
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH}/prometheus