{
  "permissions": {
    "allow": [
      "mcp__playwright__browser_navigate",
      "mcp__playwright__browser_tab_new",
      "mcp__playwright__browser_snapshot",
      "mcp__playwright__browser_evaluate",
      "mcp__sequential-thinking__sequentialthinking",
      "mcp__playwright__browser_type",
      "mcp__playwright__browser_click",
      "Bash(source:*)",
      "Bash(python -m pytest tests/test_security.py::TestAPIRateLimiting::test_login_rate_limiting -v)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(source:*)",
      "Bash(export FLASK_APP=app:create_app)",
      "Bash(export FLASK_ENV=development)",
      "Bash(export DATABASE_URL=\"sqlite:///lokdarpan.db\")",
      "Bash(python -m flask run:*)",
      "Bash(npm run dev:*)",
      "Bash(python:*)",
      "Bash(export GEMINI_API_KEY=\"test-key\")",
      "mcp__playwright__browser_wait_for",
      "Bash(cat:*)",
      "Bash(curl:*)",
      "Bash(flask db:*)",
      "Bash(psql:*)",
      "Bash(export DATABASE_URL=postgresql://postgres:amuktha@localhost/lokdarpan_db)",
      "Bash(lsof:*)",
      "Bash(kill:*)",
      "Bash(rm:*)",
      "Bash(echo $CORS_ORIGINS)",
      "Bash(find:*)",
      "Bash(systemctl status:*)",
      "Bash(service postgresql:*)",
      "Bash(pg_ctl:*)",
      "Bash(sudo systemctl start:*)",
      "Bash(pg_isready:*)",
      "Bash(mkdir:*)",
      "Bash(cp:*)",
      "Bash(npx bmad-method install:*)",
      "Bash(npx bmad-method:*)",
      "Bash(__NEW_LINE__ echo \"Old structure:\")",
      "Bash(__NEW_LINE__ ls -la app/__init__.py app/models.py app/routes.py)",
      "Bash(__NEW_LINE__ echo \"New structure:\")",
      "Bash(__NEW_LINE__ ls -la src/app/__init__.py src/app/core/models/base.py src/app/api/routes/main.py)",
      "Bash(__NEW_LINE__ echo \"‚úÖ Both structures exist\")",
      "Bash(__NEW_LINE__ ls -la backend/app/__init__.py backend/app/models.py backend/app/routes.py)",
      "Bash(__NEW_LINE__ ls -la backend/src/app/__init__.py backend/src/app/core/models/base.py backend/src/app/api/routes/main.py)",
      "Bash(__NEW_LINE__ echo \"‚úÖ Both structures exist and are accessible\")",
      "Bash(__NEW_LINE__ echo \"‚úÖ File structure verification complete\")",
      "Bash(__NEW_LINE__ cd ../frontend)",
      "Bash(__NEW_LINE__ ls -la src/components/Dashboard.jsx src/lib/api.js)",
      "Bash(__NEW_LINE__ ls -la src/app/Dashboard.jsx src/shared/services/api.js)",
      "Bash(__NEW_LINE__ echo \"‚úÖ Frontend structure verification complete\")",
      "Bash(npm run build:*)",
      "Bash(git push:*)",
      "Bash(node:*)",
      "Bash(npm --version)",
      "Bash(pip install:*)",
      "Bash(grep:*)",
      "Bash(timeout 10s npm run dev)",
      "Bash(timeout:*)",
      "Bash(flask run)",
      "Bash(flask run:*)",
      "mcp__playwright__browser_console_messages",
      "mcp__playwright__browser_network_requests",
      "Bash(chmod:*)",
      "mcp__playwright__browser_press_key",
      "Bash(npm test:*)",
      "Bash(pkill:*)",
      "WebSearch",
      "WebSearch",
      "WebSearch",
      "WebFetch(domain:tsec.gov.in)",
      "WebFetch(domain:data.opencity.in)",
      "WebFetch(domain:telanganatoday.com)",
      "WebFetch(domain:www.deccanchronicle.com)",
      "Bash(pkill:*)",
      "Bash(PYTHONPATH=. python scripts/reseed_demo_data.py)",
      "mcp__playwright__browser_select_option",
      "mcp__playwright__browser_close",
      "Bash(for ward in \"Jubilee Hills\" \"Banjara Hills\" \"Begumpet\" \"Fateh Nagar\" \"Jubilee Hills\")",
      "Bash(done)",
      "Bash(for ward in \"Jubilee%20Hills\" \"Banjara%20Hills\" \"Begumpet\" \"Fateh%20Nagar\")",
      "Bash(export PGDATABASE=lokdarpan_db)",
      "Bash(export PGUSER=postgres)",
      "Bash(export PGPASSWORD=amuktha)",
      "Bash(export PGHOST=localhost)",
      "Bash(PGDATABASE=lokdarpan_db PGUSER=postgres PGPASSWORD=amuktha PGHOST=localhost psql -c \"\\d post\")",
      "Bash(PGDATABASE=lokdarpan_db PGUSER=postgres PGPASSWORD=amuktha PGHOST=localhost psql -c \"SELECT city, length(text) as text_length, emotion, party, epaper_id FROM post WHERE city = ''Himayath Nagar'' LIMIT 5;\")",
      "Bash(PGDATABASE=lokdarpan_db PGUSER=postgres PGPASSWORD=amuktha PGHOST=localhost psql -c \"SELECT text FROM post WHERE city = ''Himayath Nagar'' LIMIT 1;\")",
      "Bash(PGDATABASE=lokdarpan_db PGUSER=postgres PGPASSWORD=amuktha PGHOST=localhost psql -c \"SELECT count(*) as alert_count FROM alert;\")",
      "Bash(PGDATABASE=lokdarpan_db PGUSER=postgres PGPASSWORD=amuktha PGHOST=localhost psql:*)",
      "Bash(PYTHONPATH=backend python backend/scripts/seed_comprehensive_political_data.py)",
      "Bash(export FLASK_APP=backend/app:create_app)",
      "Bash(PYTHONPATH=. python ../scripts/seed_comprehensive_political_data.py)",
      "Bash(PYTHONPATH=. python scripts/seed_comprehensive_political_data.py)",
      "Bash(PYTHONPATH=. python scripts/test_api_endpoints.py)",
      "Bash(PYTHONPATH=. python scripts/fix_trends_data.py)",
      "Bash(PYTHONPATH=. python scripts/validate_database_migration.py)",
      "Bash(ss:*)",
      "Bash(npm run:*)",
      "Bash(PYTHONPATH=. python scripts/fix_ward_overview_data.py)",
      "Bash(PYTHONPATH=. python3 scripts/fix_ward_overview_data.py)",
      "Bash(env)",
      "Bash(/dev/null)",
      "Bash(git checkout:*)",
      "Bash(md-tree:*)",
      "Bash(flask --version)",
      "Bash(./scripts/dev-start.sh:*)",
      "Bash(PYTHONPATH=. python -c \"\nimport asyncio\nimport sys\nsys.path.append(''.'')\nfrom strategist.reliability_tests import ReliabilityTestFramework\n\nasync def run_checkpoint():\n    framework = ReliabilityTestFramework()\n    print(''üöÄ Starting 48-hour checkpoint validation...'')\n    \n    # Run all reliability tests\n    results = await framework.run_all_tests()\n    \n    print(f''\\n‚úÖ Checkpoint Results:'')\n    print(f''   Overall Health Score: {results[\"\"overall_health_score\"\"]}/100'')\n    print(f''   Tests Passed: {results[\"\"tests_passed\"\"]}/{results[\"\"total_tests\"\"]}'')\n    print(f''   Success Rate: {results[\"\"success_rate\"\"]:.1%}'')\n    \n    # Test categories\n    for category, result in results[''test_results''].items():\n        status = ''‚úÖ'' if result[''passed''] else ''‚ùå''\n        print(f''   {status} {category.replace(\"\"_\"\", \"\" \"\").title()}: {result[\"\"score\"\"]}/100'')\n    \n    if results[''overall_health_score''] >= 85:\n        print(''\\nüéØ CHECKPOINT PASSED: System meets reliability standards'')\n        return True\n    else:\n        print(''\\n‚ö†Ô∏è CHECKPOINT REQUIRES ATTENTION: Some reliability issues detected'')\n        return False\n\n# Run the checkpoint\nif __name__ == ''__main__'':\n    result = asyncio.run(run_checkpoint())\n    sys.exit(0 if result else 1)\n\")",
      "Bash(PYTHONPATH=.:*)",
      "Bash(echo:*)",
      "Bash(claude --agent analyst \"*perform-market-research\")",
      "Bash(./scripts/update-project-brief.sh:*)",
      "Bash(bash:*)",
      "Bash(dos2unix:*)",
      "Bash(sed:*)",
      "Bash(git branch:*)",
      "Bash(git for-each-ref:*)",
      "Bash(for branch in feature/phase3-political-strategist feature/last24h-epaper-intel-2025-08-15 feature/emotion-driver-analysis feature/enhanced-ai feature/granular-mapping)",
      "Bash(do echo \"=== $branch ===\")",
      "Bash(git log:*)",
      "Bash(git show-branch:*)",
      "Bash(git stash push:*)",
      "Bash(redis-cli:*)",
      "Bash(celery -A celery_worker.celery inspect ping)",
      "Bash(celery:*)",
      "Bash(git restore:*)",
      "Bash(git merge:*)",
      "Bash(npm install:*)",
      "mcp__magic__21st_magic_component_builder",
      "mcp__playwright__browser_resize",
      "mcp__playwright__browser_take_screenshot",
      "Bash(export LOG_DIR=\"/tmp/lokdarpan\")",
      "Bash(for i in {1..5})",
      "Bash(time curl:*)",
      "mcp__playwright__browser_install",
      "Bash(PYTHONPATH=backend:. python scripts/living-docs-engine.py --init)",
      "Bash(PYTHONPATH=backend:. python3 scripts/living-docs-engine.py --init)",
      "Bash(./test_api_comprehensive.sh:*)",
      "Bash(./scripts/setup-automation-cron.sh:*)",
      "Read(//mnt/c/Users/amukt/Downloads/**)",
      "Bash(./venv/bin/python -c \"import sys; sys.path.append(''.''); from strategist.service import PoliticalStrategist; print(''Service loads successfully'')\")",
      "Bash(npx eslint:*)",
      "Bash(npm view:*)",
      "Bash(export ERROR_LOG_FILE=\"logs/errors.log\")",
      "Bash(backend/test_api_comprehensive.sh:*)",
      "Bash(export:*)",
      "mcp__context7__resolve-library-id",
      "mcp__context7__get-library-docs",
      "Bash(git rm:*)",
      "Bash(npx serve:*)",
      "Bash(PYTHONPATH=/mnt/c/Users/amukt/Projects/LokDarpan/backend python -c \"\nfrom app import create_app, db\napp = create_app()\nwith app.app_context():\n    try:\n        db.create_all()\n        print(''‚úÖ Database tables created successfully'')\n    except Exception as e:\n        print(f''‚ö†Ô∏è Database setup: {e}'')\n\")",
      "Bash(npm ci:*)",
      "Bash(./scripts/production-deploy.sh:*)",
      "Bash(/mnt/c/Users/amukt/Projects/LokDarpan/scripts/production-deploy.sh:*)",
      "Bash(./scripts/morning-check.sh:*)",
      "Bash(pwdx:*)",
      "Bash(/mnt/c/Users/amukt/Projects/LokDarpan/scripts/morning-check.sh:*)",
      "Bash(pip show:*)",
      "Read(//tmp/**)",
      "Bash(venv/Scripts/python:*)",
      "Bash(./venv/Scripts/python.exe --version)",
      "Bash(pip3 list:*)",
      "Read(//home/amuktha/**)",
      "Read(//home/amuktha/.claude/**)",
      "Bash(PYTHONPATH=/mnt/c/Users/amukt/Projects/LokDarpan/backend python3 scripts/living-docs-engine.py --init)",
      "mcp__playwright__browser_fill_form",
      "Bash(test:*)",
      "Bash(npx playwright test:*)",
      "Bash(npx vitest:*)",
      "Bash(call venv\\Scripts\\activate)",
      "Bash(if [ ! -d \"venv\" ])",
      "Bash(then python -m venv venv)",
      "Bash(fi)"
    ],
    "deny": [],
    "ask": [],
    "additionalDirectories": [
      "/mnt/c/Users/amukt/Projects",
      "/tmp/lokdarpan",
      "C:\\c\\Users\\amukt\\Projects\\LokDarpan"
    ]
  },
  "enableAllProjectMcpServers": true,
  "enabledMcpjsonServers": [
    "firecrawl"
  ]
}